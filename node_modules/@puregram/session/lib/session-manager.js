"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionManager = void 0;
const storages_1 = require("./storages");
class SessionManager {
    constructor(options = {}) {
        this.storage = options.storage || new storages_1.MemoryStorage();
        this.getStorageKey = options.getStorageKey || ((context) => String(context.senderId));
    }
    /** Returns the middleware for embedding */
    get middleware() {
        const { storage, getStorageKey } = this;
        return async (context, next) => {
            const storageKey = getStorageKey(context);
            let changed = false;
            const wrapSession = (targetRaw) => (new Proxy({ ...targetRaw, $forceUpdate }, {
                set: (target, prop, value) => {
                    changed = true;
                    target[prop] = value;
                    return true;
                },
                deleteProperty: (target, prop) => {
                    changed = true;
                    delete target[prop];
                    return true;
                }
            }));
            const $forceUpdate = () => {
                if (Object.keys(session).length > 1) {
                    changed = false;
                    return storage.set(storageKey, session);
                }
                return storage.delete(storageKey);
            };
            const initialSession = await storage.get(storageKey) || {};
            let session = wrapSession(initialSession);
            Object.defineProperty(context, 'session', {
                get: () => session,
                set: (newSession) => {
                    session = wrapSession(newSession);
                    changed = true;
                }
            });
            await next();
            if (changed)
                await $forceUpdate();
            else
                await storage.touch(storageKey);
        };
    }
}
exports.SessionManager = SessionManager;
