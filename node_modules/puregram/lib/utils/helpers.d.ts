/// <reference types="node" />
import { IncomingMessage } from 'node:http';
import { Readable } from 'node:stream';
import { MediaInput } from '../common/media-source';
export declare const applyMixins: (derivedCtor: any, baseCtors: any[]) => void;
export declare const isPlainObject: (object: object) => object is Record<string, any>;
export declare const filterPayload: (payload: Record<string, any>) => Record<string, any>;
export declare const isParseable: (source: string) => boolean;
export declare const delay: (ms: number) => Promise<unknown>;
export declare const replaceChars: (source: string, chars: string[] | string) => string;
export declare const parseRequestJSON: (req: IncomingMessage) => Promise<Record<string, any>>;
/** Totally safe way to identify whether `obj` is `MediaInput` or not */
export declare const isMediaInput: (obj: Record<string, any>) => obj is MediaInput;
/** Converts complex values in `obj` into simple strings */
export declare const decomplexify: (obj: Record<string, any>) => Record<string, string>;
export declare const generateAttachId: () => string;
export declare const convertStreamToBuffer: (rawStream: Readable) => Promise<Buffer>;
export declare const updateDebugFlags: (additional: string[]) => void;
