import * as Interfaces from '../generated/telegram-interfaces';
import * as Methods from '../generated/methods';
import { Telegram } from '../telegram';
import { PreCheckoutQuery } from '../common/structures';
import { Optional, Constructor, Require } from '../types/types';
import { Context } from './context';
import { SendMixin, CloneMixin } from './mixins';
interface PreCheckoutQueryContextOptions {
    telegram: Telegram;
    update: Interfaces.TelegramUpdate;
    payload: Interfaces.TelegramPreCheckoutQuery;
    updateId: number;
}
declare class PreCheckoutQueryContext extends Context {
    payload: Interfaces.TelegramPreCheckoutQuery;
    constructor(options: PreCheckoutQueryContextOptions);
    /** Checks if the query has `shippingOptionId` property */
    hasShippingOptionId(): this is Require<this, 'shippingOptionId'>;
    /** Checks if the query has `orderInfo` property */
    hasOrderInfo(): this is Require<this, 'orderInfo'>;
    /** Answers to the pending pre-checkout query */
    answerPreCheckoutQuery(params: Optional<Methods.AnswerPreCheckoutQueryParams, 'pre_checkout_query_id'>): Promise<true>;
}
interface PreCheckoutQueryContext extends Constructor<PreCheckoutQueryContext>, PreCheckoutQuery, SendMixin, CloneMixin<PreCheckoutQueryContext, PreCheckoutQueryContextOptions> {
}
export { PreCheckoutQueryContext };
