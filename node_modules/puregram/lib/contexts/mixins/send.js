"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendMixin = void 0;
const structures_1 = require("../../common/structures");
const message_1 = require("../message");
/** This object represents a mixin which can invoke `chatId`/`senderId`-dependent methods */
class SendMixin {
    /** Sends message to current chat */
    async send(text, params) {
        const response = await this.telegram.api.sendMessage({
            chat_id: this.chatId || this.senderId || 0,
            text,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends photo to current chat */
    async sendPhoto(photo, params) {
        const response = await this.telegram.api.sendPhoto({
            chat_id: this.chatId || this.senderId || 0,
            photo,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends document to current chat */
    async sendDocument(document, params) {
        const response = await this.telegram.api.sendDocument({
            chat_id: this.chatId || this.senderId || 0,
            document,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends audio to current chat */
    async sendAudio(audio, params) {
        const response = await this.telegram.api.sendAudio({
            chat_id: this.chatId || this.senderId || 0,
            audio,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends video to current chat */
    async sendVideo(video, params) {
        const response = await this.telegram.api.sendVideo({
            chat_id: this.chatId || this.senderId || 0,
            video,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends animation to current chat */
    async sendAnimation(animation, params) {
        const response = await this.telegram.api.sendAnimation({
            chat_id: this.chatId || this.senderId || 0,
            animation,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends video note to current chat */
    async sendVideoNote(videoNote, params) {
        const response = await this.telegram.api.sendVideoNote({
            chat_id: this.chatId || this.senderId || 0,
            video_note: videoNote,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends voice to current chat */
    async sendVoice(voice, params) {
        const response = await this.telegram.api.sendVoice({
            chat_id: this.chatId || this.senderId || 0,
            voice,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends media group to current chat */
    async sendMediaGroup(mediaGroup, params) {
        const response = await this.telegram.api.sendMediaGroup({
            chat_id: this.chatId || this.senderId || 0,
            media: mediaGroup,
            ...params
        });
        return response.map(message => new message_1.MessageContext({
            telegram: this.telegram,
            payload: message
        }));
    }
    /** Sends location to current chat */
    async sendLocation(latitude, longitude, params) {
        const response = await this.telegram.api.sendLocation({
            chat_id: this.chatId || this.senderId || 0,
            latitude,
            longitude,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends invoice to current user */
    async sendInvoice(params) {
        const response = await this.telegram.api.sendInvoice({
            chat_id: this.chatId || this.senderId || 0,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends venue to current chat */
    async sendVenue(params) {
        const response = await this.telegram.api.sendVenue({
            chat_id: this.chatId || this.senderId || 0,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends contact to current chat */
    async sendContact(params) {
        const response = await this.telegram.api.sendContact({
            chat_id: this.chatId || this.senderId || 0,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends poll to current chat */
    async sendPoll(params) {
        const response = await this.telegram.api.sendPoll({
            chat_id: this.chatId || this.senderId || 0,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Stops poll in current chat */
    async stopPoll(messageId, params) {
        const response = await this.telegram.api.stopPoll({
            chat_id: this.chatId || this.senderId || 0,
            message_id: messageId,
            ...params
        });
        return new structures_1.Poll(response);
    }
    /** Sends chat action to current chat */
    sendChatAction(action, params = {}) {
        return this.telegram.api.sendChatAction({
            chat_id: this.chatId || this.senderId || 0,
            action,
            ...params
        });
    }
    /** Sends sticker */
    async sendSticker(sticker, params) {
        const response = await this.telegram.api.sendSticker({
            chat_id: this.chatId || this.senderId || 0,
            sticker,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Sends dice */
    async sendDice(emoji, params) {
        const response = await this.telegram.api.sendDice({
            chat_id: this.chatId || this.senderId || 0,
            emoji,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
}
exports.SendMixin = SendMixin;
