import * as Methods from '../../generated/methods';
import { MediaInput } from '../../common/media-source';
import { Optional } from '../../types/types';
import { Poll } from '../../common/structures';
import { MessageContext } from '../message';
import { Context } from '../context';
interface SendMixinMetadata {
    get chatId(): number;
    get senderId(): number | undefined;
}
/** This object represents a mixin which can invoke `chatId`/`senderId`-dependent methods */
declare class SendMixin {
    /** Sends message to current chat */
    send(text: string, params?: Optional<Methods.SendMessageParams, 'chat_id' | 'text'>): Promise<MessageContext>;
    /** Sends photo to current chat */
    sendPhoto(photo: MediaInput, params?: Optional<Methods.SendPhotoParams, 'chat_id' | 'photo'>): Promise<MessageContext>;
    /** Sends document to current chat */
    sendDocument(document: MediaInput, params?: Optional<Methods.SendDocumentParams, 'chat_id' | 'document'>): Promise<MessageContext>;
    /** Sends audio to current chat */
    sendAudio(audio: MediaInput, params?: Optional<Methods.SendAudioParams, 'chat_id' | 'audio'>): Promise<MessageContext>;
    /** Sends video to current chat */
    sendVideo(video: MediaInput, params?: Optional<Methods.SendVideoParams, 'chat_id' | 'video'>): Promise<MessageContext>;
    /** Sends animation to current chat */
    sendAnimation(animation: MediaInput, params?: Optional<Methods.SendAnimationParams, 'chat_id' | 'animation'>): Promise<MessageContext>;
    /** Sends video note to current chat */
    sendVideoNote(videoNote: MediaInput, params?: Optional<Methods.SendVideoNoteParams, 'chat_id' | 'video_note'>): Promise<MessageContext>;
    /** Sends voice to current chat */
    sendVoice(voice: MediaInput, params?: Optional<Methods.SendVoiceParams, 'chat_id' | 'voice'>): Promise<MessageContext>;
    /** Sends media group to current chat */
    sendMediaGroup(mediaGroup: Methods.SendMediaGroupParams['media'], params?: Optional<Methods.SendMediaGroupParams, 'chat_id' | 'media'>): Promise<MessageContext[]>;
    /** Sends location to current chat */
    sendLocation(latitude: number, longitude: number, params?: Optional<Methods.SendLocationParams, 'chat_id' | 'latitude' | 'longitude'>): Promise<MessageContext>;
    /** Sends invoice to current user */
    sendInvoice(params: Optional<Methods.SendInvoiceParams, 'chat_id'>): Promise<MessageContext>;
    /** Sends venue to current chat */
    sendVenue(params: Optional<Methods.SendVenueParams, 'chat_id'>): Promise<MessageContext>;
    /** Sends contact to current chat */
    sendContact(params: Optional<Methods.SendContactParams, 'chat_id'>): Promise<MessageContext>;
    /** Sends poll to current chat */
    sendPoll(params: Optional<Methods.SendPollParams, 'chat_id'>): Promise<MessageContext>;
    /** Stops poll in current chat */
    stopPoll(messageId: number, params?: Partial<Methods.StopPollParams>): Promise<Poll>;
    /** Sends chat action to current chat */
    sendChatAction(action: Methods.SendChatActionParams['action'], params?: Optional<Methods.SendChatActionParams, 'chat_id' | 'action'>): Promise<true>;
    /** Sends sticker */
    sendSticker(sticker: MediaInput, params?: Optional<Methods.SendStickerParams, 'sticker' | 'chat_id'>): Promise<MessageContext>;
    /** Sends dice */
    sendDice(emoji: Methods.SendDiceParams['emoji'], params?: Partial<Methods.SendDiceParams>): Promise<MessageContext>;
}
interface SendMixin extends Context, SendMixinMetadata {
}
export { SendMixin };
