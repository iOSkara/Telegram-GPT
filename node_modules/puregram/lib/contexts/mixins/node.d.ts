import * as Interfaces from '../../generated/telegram-interfaces';
import * as Methods from '../../generated/methods';
import { InlineKeyboard, InlineKeyboardBuilder } from '../../common/keyboards';
import { MediaInput } from '../../common/media-source';
import { MessageId } from '../../common/structures';
import { Optional } from '../../types/types';
import { Context } from '../context';
import { SendMixin } from './send';
import { MessageContext } from '../message';
interface NodeMixinMetadata {
    get id(): number;
}
/** This object represents a mixin which has `id` field and can invoke `id`-dependent methods */
declare class NodeMixin {
    /** Replies to current message */
    reply(text: string, params?: Optional<Methods.SendMessageParams, 'chat_id' | 'text'>): Promise<MessageContext>;
    /** Replies to current message with photo */
    replyWithPhoto(photo: MediaInput, params?: Optional<Methods.SendPhotoParams, 'chat_id' | 'photo'>): Promise<MessageContext>;
    /** Replies to current message with document */
    replyWithDocument(document: MediaInput, params?: Optional<Methods.SendDocumentParams, 'chat_id' | 'document'>): Promise<MessageContext>;
    /** Replies to current message with audio */
    replyWithAudio(audio: MediaInput, params?: Optional<Methods.SendAudioParams, 'chat_id' | 'audio'>): Promise<MessageContext>;
    /** Replies to current message with video */
    replyWithVideo(video: MediaInput, params?: Optional<Methods.SendVideoParams, 'chat_id' | 'video'>): Promise<MessageContext>;
    /** Replies to current message with animation */
    replyWithAnimation(animation: MediaInput, params?: Optional<Methods.SendAnimationParams, 'chat_id' | 'animation'>): Promise<MessageContext>;
    /** Replies to current message with video note */
    replyWithVideoNote(videoNote: MediaInput, params?: Optional<Methods.SendVideoNoteParams, 'chat_id' | 'video_note'>): Promise<MessageContext>;
    /** Replies to current message with voice */
    replyWithVoice(voice: MediaInput, params?: Optional<Methods.SendVoiceParams, 'chat_id'>): Promise<MessageContext>;
    /** Replies to current message with media group */
    replyWithMediaGroup(mediaGroup: Methods.SendMediaGroupParams['media'], params?: Optional<Methods.SendMediaGroupParams, 'chat_id' | 'media'>): Promise<MessageContext[]>;
    /** Replies to current message with location */
    replyWithLocation(latitude: number, longitude: number, params?: Optional<Methods.SendLocationParams, 'chat_id' | 'latitude' | 'longitude'>): Promise<MessageContext>;
    /** Replies to current message with invoice */
    replyWithInvoice(params: Optional<Methods.SendInvoiceParams, 'chat_id'>): Promise<MessageContext>;
    /** Replies to current message with venue */
    replyWithVenue(params: Optional<Methods.SendVenueParams, 'chat_id'>): Promise<MessageContext>;
    /** Replies to current message with contact */
    replyWithContact(params: Optional<Methods.SendContactParams, 'chat_id'>): Promise<MessageContext>;
    /** Replies to current message with poll */
    replyWithPoll(params: Optional<Methods.SendPollParams, 'chat_id'>): Promise<MessageContext>;
    /** Replies to current message with sticker */
    replyWithSticker(sticker: MediaInput, params: Optional<Methods.SendStickerParams, 'chat_id'>): Promise<MessageContext>;
    /** Replies to current message with a dice */
    replyWithDice(emoji: Methods.SendDiceParams['emoji'], params?: Partial<Methods.SendDiceParams>): Promise<MessageContext>;
    /** @deprecated use `delete()` instead */
    deleteMessage(params?: Optional<Methods.DeleteMessageParams, 'chat_id' | 'message_id'>): Promise<true>;
    /** Deletes current message */
    delete(params?: Optional<Methods.DeleteMessageParams, 'chat_id' | 'message_id'>): Promise<true>;
    /** Edits current message live location */
    editMessageLiveLocation(params: Methods.EditMessageLiveLocationParams): Promise<true | MessageContext>;
    /** Stops current message live location */
    stopMessageLiveLocation(params?: Methods.StopMessageLiveLocationParams): Promise<true | MessageContext>;
    /** Edits current message text */
    editMessageText(text: string, params?: Partial<Methods.EditMessageTextParams>): Promise<true | MessageContext>;
    /** Edits current message caption */
    editMessageCaption(caption: string, params?: Partial<Methods.EditMessageCaptionParams>): Promise<true | MessageContext>;
    /** Edits current message media */
    editMessageMedia(media: Interfaces.TelegramInputMedia, params?: Partial<Methods.EditMessageMediaParams>): Promise<true | MessageContext>;
    /** Edits current message reply markup */
    editMessageReplyMarkup(replyMarkup: InlineKeyboard | InlineKeyboardBuilder | Interfaces.TelegramInlineKeyboardMarkup, params?: Partial<Methods.EditMessageReplyMarkupParams>): Promise<true | MessageContext>;
    /** Copies current message [into other chat if `chatId` is provided] */
    copy(params?: Optional<Methods.CopyMessageParams, 'chat_id' | 'from_chat_id' | 'message_id'>): Promise<MessageId>;
    /** Forwards current message [into other chat if `chatId` is provided] */
    forward(params?: Optional<Methods.ForwardMessageParams, 'chat_id' | 'from_chat_id' | 'message_id'>): Promise<MessageContext>;
}
interface NodeMixin extends Context, NodeMixinMetadata, SendMixin {
}
export { NodeMixin };
