"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeMixin = void 0;
const structures_1 = require("../../common/structures");
const message_1 = require("../message");
/** This object represents a mixin which has `id` field and can invoke `id`-dependent methods */
class NodeMixin {
    /** Replies to current message */
    reply(text, params) {
        return this.send(text, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with photo */
    replyWithPhoto(photo, params) {
        return this.sendPhoto(photo, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with document */
    replyWithDocument(document, params) {
        return this.sendDocument(document, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with audio */
    replyWithAudio(audio, params) {
        return this.sendAudio(audio, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with video */
    replyWithVideo(video, params) {
        return this.sendVideo(video, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with animation */
    replyWithAnimation(animation, params) {
        return this.sendAnimation(animation, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with video note */
    replyWithVideoNote(videoNote, params) {
        return this.sendVideoNote(videoNote, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with voice */
    replyWithVoice(voice, params) {
        return this.sendVoice(voice, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with media group */
    replyWithMediaGroup(mediaGroup, params) {
        return this.sendMediaGroup(mediaGroup, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with location */
    replyWithLocation(latitude, longitude, params) {
        return this.sendLocation(latitude, longitude, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with invoice */
    replyWithInvoice(params) {
        return this.sendInvoice({
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with venue */
    replyWithVenue(params) {
        return this.sendVenue({
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with contact */
    replyWithContact(params) {
        return this.sendContact({
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with poll */
    replyWithPoll(params) {
        return this.sendPoll({
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with sticker */
    replyWithSticker(sticker, params) {
        return this.sendSticker(sticker, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** Replies to current message with a dice */
    replyWithDice(emoji, params) {
        return this.sendDice(emoji, {
            reply_to_message_id: this.id,
            ...params
        });
    }
    /** @deprecated use `delete()` instead */
    deleteMessage(params) {
        return this.delete(params);
    }
    /** Deletes current message */
    delete(params = {}) {
        return this.telegram.api.deleteMessage({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            ...params
        });
    }
    /** Edits current message live location */
    async editMessageLiveLocation(params) {
        const response = await this.telegram.api.editMessageLiveLocation({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            ...params
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Stops current message live location */
    async stopMessageLiveLocation(params) {
        const response = await this.telegram.api.stopMessageLiveLocation({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            ...params
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Edits current message text */
    async editMessageText(text, params) {
        const response = await this.telegram.api.editMessageText({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            text,
            ...params
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Edits current message caption */
    async editMessageCaption(caption, params) {
        const response = await this.telegram.api.editMessageCaption({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            caption,
            ...params
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Edits current message media */
    async editMessageMedia(media, params) {
        const response = await this.telegram.api.editMessageMedia({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            media,
            ...params
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Edits current message reply markup */
    async editMessageReplyMarkup(replyMarkup, params) {
        const response = await this.telegram.api.editMessageReplyMarkup({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            reply_markup: replyMarkup,
            ...params
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
    /** Copies current message [into other chat if `chatId` is provided] */
    async copy(params = {}) {
        const response = await this.telegram.api.copyMessage({
            chat_id: this.chatId || this.senderId || 0,
            from_chat_id: this.chatId || 0,
            message_id: this.id,
            ...params
        });
        return new structures_1.MessageId(response);
    }
    /** Forwards current message [into other chat if `chatId` is provided] */
    async forward(params = {}) {
        const response = await this.telegram.api.forwardMessage({
            chat_id: this.chatId || this.senderId || 0,
            from_chat_id: this.chatId || 0,
            message_id: this.id,
            ...params
        });
        return new message_1.MessageContext({
            telegram: this.telegram,
            payload: response
        });
    }
}
exports.NodeMixin = NodeMixin;
