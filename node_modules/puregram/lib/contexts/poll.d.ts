import * as Interfaces from '../generated/telegram-interfaces';
import { Telegram } from '../telegram';
import { Constructor, Require, RequireValue } from '../types/types';
import { Poll } from '../common/structures';
import { Context } from './context';
import { CloneMixin } from './mixins';
import { PollType } from '../types/enums';
interface PollContextOptions {
    telegram: Telegram;
    update: Interfaces.TelegramUpdate;
    payload: Interfaces.TelegramPoll;
    updateId: number;
}
declare class PollContext extends Context {
    payload: Interfaces.TelegramPoll;
    constructor(options: PollContextOptions);
    /** Returns `true` if current poll is a regular one */
    isRegular(): this is RequireValue<this, 'type', PollType.Regular>;
    /** Returns `true` if current poll is a quiz */
    isQuiz(): this is RequireValue<this, 'type', PollType.Quiz>;
    /** Checks if poll has `correctOptionId` property */
    hasCorrectOptionId(): this is Require<this, 'correctOptionId'>;
    /** Checks if poll has `explanation` property */
    hasExplanation(): this is Require<this, 'explanation'>;
    /** Checks if poll has `explanationEntities` property */
    hasExplanationEntities(): this is Require<this, 'explanationEntities'>;
    /** Checks if poll has `openPeriod` property */
    hasOpenPeriod(): this is Require<this, 'openPeriod'>;
    /** Checks if poll has `closeDate` property */
    hasCloseDate(): this is Require<this, 'closeDate'>;
}
interface PollContext extends Constructor<PollContext>, Poll, CloneMixin<PollContext, PollContextOptions> {
}
export { PollContext };
