"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallbackQueryContext = void 0;
// eslint-disable-next-line max-classes-per-file
const inspectable_1 = require("inspectable");
const helpers_1 = require("../utils/helpers");
const structures_1 = require("../common/structures");
const context_1 = require("./context");
const message_1 = require("./message");
const mixins_1 = require("./mixins");
/** Called when `callback_query` event occurs */
class CallbackQueryContext extends context_1.Context {
    constructor(options) {
        super({
            telegram: options.telegram,
            updateType: 'callback_query',
            updateId: options.updateId,
            update: options.update
        });
        this.payload = options.payload;
    }
    /** Checks if the query has `message` property */
    hasMessage() {
        return this.payload.message !== undefined;
    }
    /**
     * Message with the callback button that originated the query.
     * Note that message content and message date will not be available
     * if the message is too old
     */
    get message() {
        var _a;
        if (this.payload.message === undefined) {
            return;
        }
        return new message_1.MessageContext({
            telegram: this.telegram,
            update: this.update,
            payload: this.payload.message,
            updateId: (_a = this.update) === null || _a === void 0 ? void 0 : _a.update_id
        });
    }
    /** Checks if the query has `queryPayload` property */
    hasQueryPayload() {
        return this.payload.data !== undefined;
    }
    /**
     * Data associated with the callback button.
     * Be aware that a bad client can send arbitrary data in this field.
     */
    get queryPayload() {
        const { data } = this.payload;
        if (data === undefined) {
            return;
        }
        if ((0, helpers_1.isParseable)(data)) {
            return JSON.parse(data);
        }
        return data;
    }
    /** Checks if the query has `inlineMessageId` property */
    hasInlineMessageId() {
        return this.inlineMessageId !== undefined;
    }
    /** Checks if the query has `data` property */
    hasData() {
        return this.data !== undefined;
    }
    /** Checks if the query has `gameShortName` property */
    hasGameShortName() {
        return this.gameShortName !== undefined;
    }
    /** Answers to current callback query */
    answerCallbackQuery(params) {
        return this.telegram.api.answerCallbackQuery({
            callback_query_id: this.id,
            ...params
        });
    }
}
exports.CallbackQueryContext = CallbackQueryContext;
(0, helpers_1.applyMixins)(CallbackQueryContext, [structures_1.CallbackQuery, mixins_1.CloneMixin]);
(0, inspectable_1.inspectable)(CallbackQueryContext, {
    serialize(context) {
        const payload = {
            id: context.id,
            senderId: context.senderId,
            from: context.from,
            message: context.message,
            inlineMessageId: context.inlineMessageId,
            chatInstance: context.chatInstance,
            queryPayload: context.queryPayload,
            gameShortName: context.gameShortName
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
