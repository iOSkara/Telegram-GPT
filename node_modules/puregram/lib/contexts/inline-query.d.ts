import * as Interfaces from '../generated/telegram-interfaces';
import * as Methods from '../generated/methods';
import { Telegram } from '../telegram';
import { Constructor, Require } from '../types/types';
import { InlineQuery } from '../common/structures';
import { Context } from './context';
import { CloneMixin } from './mixins';
interface InlineQueryContextOptions {
    telegram: Telegram;
    update: Interfaces.TelegramUpdate;
    payload: Interfaces.TelegramInlineQuery;
    updateId: number;
}
declare class InlineQueryContext extends Context {
    payload: Interfaces.TelegramInlineQuery;
    constructor(options: InlineQueryContextOptions);
    /** Sender's ID */
    get senderId(): number;
    /** Checks if query has `location` property */
    hasLocation(): this is Require<this, 'location'>;
    /** Answers to inline query */
    answerInlineQuery(results: Interfaces.TelegramInlineQueryResult[], params?: Partial<Methods.AnswerInlineQueryParams>): Promise<true>;
}
interface InlineQueryContext extends Constructor<InlineQueryContext>, InlineQuery, CloneMixin<InlineQueryContext, InlineQueryContextOptions> {
}
export { InlineQueryContext };
