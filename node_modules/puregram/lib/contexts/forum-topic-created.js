"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForumTopicCreatedContext = void 0;
const structures_1 = require("../common/structures");
const helpers_1 = require("../utils/helpers");
const context_1 = require("./context");
const inspectable_1 = require("inspectable");
const mixins_1 = require("./mixins");
/** This object represents a service message about a new forum topic created in the chat. */
class ForumTopicCreatedContext extends context_1.Context {
    constructor(options) {
        super({
            telegram: options.telegram,
            updateType: 'forum_topic_created',
            updateId: options.updateId,
            update: options.update
        });
        this.payload = options.payload;
        this.event = this.payload.forum_topic_created;
    }
    /** Name of the topic */
    get name() {
        return this.event.name;
    }
    /** Color of the topic icon in RGB format */
    get iconColor() {
        return this.event.icon_color;
    }
    /** Unique identifier of the custom emoji shown as the topic icon */
    get iconCustomEmojiId() {
        return this.event.icon_custom_emoji_id;
    }
    /** Checks whether the event has `iconCustomEmojiId` property */
    hasIconCustomEmojiId() {
        return this.iconCustomEmojiId !== undefined;
    }
}
exports.ForumTopicCreatedContext = ForumTopicCreatedContext;
(0, helpers_1.applyMixins)(ForumTopicCreatedContext, [structures_1.Message, mixins_1.TargetMixin, mixins_1.SendMixin, mixins_1.NodeMixin, mixins_1.CloneMixin]);
(0, inspectable_1.inspectable)(ForumTopicCreatedContext, {
    serialize(context) {
        const payload = {
            name: context.name,
            iconColor: context.iconColor,
            iconCustomEmojiId: context.iconCustomEmojiId
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
