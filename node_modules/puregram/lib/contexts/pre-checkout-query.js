"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreCheckoutQueryContext = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../utils/helpers");
const structures_1 = require("../common/structures");
const context_1 = require("./context");
const mixins_1 = require("./mixins");
class PreCheckoutQueryContext extends context_1.Context {
    constructor(options) {
        super({
            telegram: options.telegram,
            updateType: 'pre_checkout_query',
            updateId: options.updateId,
            update: options.update
        });
        this.payload = options.payload;
    }
    /** Checks if the query has `shippingOptionId` property */
    hasShippingOptionId() {
        return this.shippingOptionId !== undefined;
    }
    /** Checks if the query has `orderInfo` property */
    hasOrderInfo() {
        return this.orderInfo !== undefined;
    }
    /** Answers to the pending pre-checkout query */
    answerPreCheckoutQuery(params) {
        return this.telegram.api.answerPreCheckoutQuery({
            pre_checkout_query_id: this.id,
            ...params
        });
    }
}
exports.PreCheckoutQueryContext = PreCheckoutQueryContext;
(0, helpers_1.applyMixins)(PreCheckoutQueryContext, [structures_1.PreCheckoutQuery, mixins_1.SendMixin, mixins_1.CloneMixin]);
(0, inspectable_1.inspectable)(PreCheckoutQueryContext, {
    serialize(context) {
        const payload = {
            id: context.id,
            from: context.from,
            senderId: context.senderId,
            currency: context.currency,
            totalAmount: context.totalAmount,
            invoicePayload: context.invoicePayload,
            shippingOptionId: context.shippingOptionId,
            orderInfo: context.orderInfo
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
