import { Message } from '../common/structures';
import * as Interfaces from '../generated/telegram-interfaces';
import { Telegram } from '../telegram';
import { Constructor, Require } from '../types/types';
import { Context } from './context';
import { CloneMixin, NodeMixin, SendMixin, TargetMixin } from './mixins';
interface ForumTopicEditedContextOptions {
    telegram: Telegram;
    update: Interfaces.TelegramUpdate;
    payload: Interfaces.TelegramMessage;
    updateId: number;
}
/** This object represents a service message about an edited forum topic. */
declare class ForumTopicEditedContext extends Context {
    payload: Interfaces.TelegramMessage;
    private event;
    constructor(options: ForumTopicEditedContextOptions);
    /** New name of the topic, if it was edited */
    get name(): string | undefined;
    /** Checks whether the `name` property has been edited */
    hasName(): this is Require<this, 'name'>;
    /** New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed */
    get iconCustomEmojiId(): string | undefined;
    /** Checks whether the `iconCustomEmojiId` property has been edited */
    hasIconCustomEmojiId(): this is Require<this, 'iconCustomEmojiId'>;
}
interface ForumTopicEditedContext extends Constructor<ForumTopicEditedContext>, Message, TargetMixin, SendMixin, NodeMixin, CloneMixin<ForumTopicEditedContext, ForumTopicEditedContextOptions> {
}
export { ForumTopicEditedContext };
