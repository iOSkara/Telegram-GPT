import { CallbackQuery } from '../common/structures';
import { Constructor, Require } from '../types/types';
import * as Interfaces from '../generated/telegram-interfaces';
import * as Methods from '../generated/methods';
import { Telegram } from '../telegram';
import { Context } from './context';
import { MessageContext } from './message';
import { CloneMixin } from './mixins';
interface CallbackQueryContextOptions {
    telegram: Telegram;
    update: Interfaces.TelegramUpdate;
    payload: Interfaces.TelegramCallbackQuery;
    updateId: number;
}
/** Called when `callback_query` event occurs */
declare class CallbackQueryContext extends Context {
    payload: Interfaces.TelegramCallbackQuery;
    constructor(options: CallbackQueryContextOptions);
    /** Checks if the query has `message` property */
    hasMessage(): this is Require<this, 'message'>;
    /**
     * Message with the callback button that originated the query.
     * Note that message content and message date will not be available
     * if the message is too old
     */
    get message(): MessageContext | undefined;
    /** Checks if the query has `queryPayload` property */
    hasQueryPayload(): this is Require<this, 'queryPayload'>;
    /**
     * Data associated with the callback button.
     * Be aware that a bad client can send arbitrary data in this field.
     */
    get queryPayload(): unknown;
    /** Checks if the query has `inlineMessageId` property */
    hasInlineMessageId(): this is Require<this, 'inlineMessageId'>;
    /** Checks if the query has `data` property */
    hasData(): this is Require<this, 'data'>;
    /** Checks if the query has `gameShortName` property */
    hasGameShortName(): this is Require<this, 'gameShortName'>;
    /** Answers to current callback query */
    answerCallbackQuery(params?: Partial<Methods.AnswerCallbackQueryParams>): Promise<true>;
}
interface CallbackQueryContext extends Constructor<CallbackQueryContext>, CallbackQuery, CloneMixin<CallbackQueryContext, CallbackQueryContextOptions> {
}
export { CallbackQueryContext };
