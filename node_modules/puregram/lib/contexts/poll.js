"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PollContext = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../utils/helpers");
const structures_1 = require("../common/structures");
const context_1 = require("./context");
const mixins_1 = require("./mixins");
const enums_1 = require("../types/enums");
class PollContext extends context_1.Context {
    constructor(options) {
        super({
            telegram: options.telegram,
            updateType: 'poll',
            updateId: options.updateId,
            update: options.update
        });
        this.payload = options.payload;
    }
    /** Returns `true` if current poll is a regular one */
    isRegular() {
        return this.type === enums_1.PollType.Regular;
    }
    /** Returns `true` if current poll is a quiz */
    isQuiz() {
        return this.type === enums_1.PollType.Quiz;
    }
    /** Checks if poll has `correctOptionId` property */
    hasCorrectOptionId() {
        return this.correctOptionId !== undefined;
    }
    /** Checks if poll has `explanation` property */
    hasExplanation() {
        return this.explanation !== undefined;
    }
    /** Checks if poll has `explanationEntities` property */
    hasExplanationEntities() {
        return this.explanationEntities !== undefined;
    }
    /** Checks if poll has `openPeriod` property */
    hasOpenPeriod() {
        return this.openPeriod !== undefined;
    }
    /** Checks if poll has `closeDate` property */
    hasCloseDate() {
        return this.closeDate !== undefined;
    }
}
exports.PollContext = PollContext;
(0, helpers_1.applyMixins)(PollContext, [structures_1.Poll, mixins_1.CloneMixin]);
(0, inspectable_1.inspectable)(PollContext, {
    serialize(context) {
        const payload = {
            id: context.id,
            question: context.question,
            options: context.options,
            totalVoterCount: context.totalVoterCount,
            isClosed: context.isClosed,
            isAnonymous: context.isAnonymous,
            type: context.type,
            allowsMultipleAnswers: context.allowsMultipleAnswers,
            correctOptionId: context.correctOptionId,
            explanation: context.explanation,
            explanationEntities: context.explanationEntities,
            openPeriod: context.openPeriod,
            closeDate: context.closeDate
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
