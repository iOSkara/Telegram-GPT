"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineQueryContext = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../utils/helpers");
const structures_1 = require("../common/structures");
const context_1 = require("./context");
const mixins_1 = require("./mixins");
class InlineQueryContext extends context_1.Context {
    constructor(options) {
        super({
            telegram: options.telegram,
            updateType: 'inline_query',
            updateId: options.updateId,
            update: options.update
        });
        this.payload = options.payload;
    }
    /** Sender's ID */
    get senderId() {
        return this.from.id;
    }
    /** Checks if query has `location` property */
    hasLocation() {
        return this.location !== undefined;
    }
    /** Answers to inline query */
    answerInlineQuery(results, params) {
        return this.telegram.api.answerInlineQuery({
            inline_query_id: this.id,
            results,
            ...params
        });
    }
}
exports.InlineQueryContext = InlineQueryContext;
(0, helpers_1.applyMixins)(InlineQueryContext, [structures_1.InlineQuery, mixins_1.CloneMixin]);
(0, inspectable_1.inspectable)(InlineQueryContext, {
    serialize(context) {
        const payload = {
            id: context.id,
            senderId: context.senderId,
            from: context.from,
            location: context.location,
            query: context.query,
            offset: context.offset
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
