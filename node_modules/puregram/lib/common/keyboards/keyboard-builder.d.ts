import * as Interfaces from '../../generated/telegram-interfaces';
/** Keyboard builder */
export declare class KeyboardBuilder {
    private rows;
    private currentRow;
    private isOneTime;
    private isResized;
    private isSelective;
    private isPersistent;
    private placeholder?;
    get [Symbol.toStringTag](): string;
    /**
     * Generate text button.
     * If none of the optional fields are used,
     * it will be sent as a message when the button is pressed
     */
    textButton(text: string): this;
    /** If specified, pressing the button will open a list of suitable users. Tapping on any user will send their identifier to the bot in a “user_shared” service message. Available in private chats only. */
    requestUserButton(text: string, params: Interfaces.TelegramKeyboardButtonRequestUser): this;
    /** If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a “chat_shared” service message. Available in private chats only. */
    requestChatButton(text: string, params: Interfaces.TelegramKeyboardButtonRequestChat): this;
    /**
     * The user's current location will be sent when the button is pressed.
     *
     * Available in private chats only
     */
    requestLocationButton(text: string): this;
    /**
     * The user will be asked to create a poll and send it to the bot
     * when the button is pressed.
     *
     * Available in private chats only
     */
    requestPollButton(text: string, type?: Interfaces.TelegramPoll['type']): this;
    /**
     * The user's phone number will be sent as a contact when
     * the button is pressed.
     *
     * Available in private chats only
     */
    requestContactButton(text: string): this;
    /**
     * The described Web App will be launched when the button is pressed.
     * The Web App will be able to send a `web_app_data` service message.
     *
     * Available in private chats only.
     */
    webAppButton(text: string, url: string): this;
    /** Save current row of buttons in the general rows */
    row(): this;
    /** Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to `false` */
    oneTime(oneTime?: boolean): this;
    /** Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to `false`, in which case the custom keyboard is always of the same height as the app's standard keyboard */
    resize(resize?: boolean): this;
    /** Use this parameter if you want to show the keyboard to specific users only */
    selective(selective?: boolean): this;
    /** Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to `false`, in which case the custom keyboard can be hidden and opened with a keyboard icon */
    persistent(persistent?: boolean): this;
    /** The placeholder to be shown in the input field when the keyboard is active */
    setPlaceholder(placeholder: string): this;
    private addButton;
    private addWideButton;
    /** Clone current builder to new instance */
    clone(): KeyboardBuilder;
    /** Returns JSON which is compatible with Telegram's `ReplyKeyboardMarkup` interface */
    toJSON(): Interfaces.TelegramReplyKeyboardMarkup;
    toString(): string;
}
