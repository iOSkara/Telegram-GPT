"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineKeyboard = void 0;
const inspectable_1 = require("inspectable");
/** Inline keyboard */
class InlineKeyboard {
    constructor() {
        this.buttons = [];
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Assemble a builder of buttons */
    static keyboard(rows) {
        const inlineKeyboard = new InlineKeyboard();
        for (const row of rows) {
            inlineKeyboard.addRow(row);
        }
        return inlineKeyboard;
    }
    /** Generate text button */
    static textButton(params) {
        if (typeof params.payload === 'object') {
            params.payload = JSON.stringify(params.payload);
        }
        return {
            text: params.text,
            callback_data: params.payload || ''
        };
    }
    /** Generate URL button */
    static urlButton(params) {
        if (typeof params.payload === 'object') {
            params.payload = JSON.stringify(params.payload);
        }
        return {
            text: params.text,
            url: params.url,
            callback_data: params.payload || ''
        };
    }
    /** Generate Web App button */
    static webAppButton(params) {
        return {
            text: params.text,
            web_app: { url: params.url }
        };
    }
    /** Generate button that will switch to current chat and type the query */
    static switchToCurrentChatButton(params) {
        return {
            text: params.text,
            switch_inline_query_current_chat: params.query
        };
    }
    /** Generate button that will prompt user to select one of their chats */
    static switchToChatButton(params) {
        return {
            text: params.text,
            switch_inline_query: params.query
        };
    }
    /** Generate game button */
    static gameButton(params) {
        return {
            text: params.text,
            callback_game: params.game
        };
    }
    /** Generate pay button */
    static payButton(params) {
        return {
            pay: true,
            text: params.text
        };
    }
    /** Generate login button */
    static loginButton(params) {
        return {
            login_url: params.loginUrl,
            text: params.text
        };
    }
    addRow(row) {
        if (!Array.isArray(row))
            row = [row];
        this.buttons.push(row);
        return this;
    }
    /** Returns JSON which is compatible with Telegram's `InlineKeyboardMarkup` interface */
    toJSON() {
        return {
            inline_keyboard: this.buttons
        };
    }
    toString() {
        return JSON.stringify(this);
    }
}
exports.InlineKeyboard = InlineKeyboard;
(0, inspectable_1.inspectable)(InlineKeyboard, {
    serialize(keyboard) {
        return keyboard.toJSON();
    }
});
