"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineKeyboardBuilder = void 0;
const inspectable_1 = require("inspectable");
class InlineKeyboardBuilder {
    constructor() {
        this.rows = [];
        this.currentRow = [];
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Generate text button */
    textButton(params) {
        if (typeof params.payload === 'object') {
            params.payload = JSON.stringify(params.payload);
        }
        return this.addButton({
            text: params.text,
            callback_data: params.payload
        });
    }
    /** Generate URL button */
    urlButton(params) {
        if (typeof params.payload === 'object') {
            params.payload = JSON.stringify(params.payload);
        }
        return this.addButton({
            text: params.text,
            url: params.url,
            callback_data: params.payload || ''
        });
    }
    /** Generate Web App button */
    webAppButton(params) {
        return this.addButton({
            text: params.text,
            web_app: { url: params.url }
        });
    }
    /** Generate button that will switch to current chat and type the query */
    switchToCurrentChatButton(params) {
        return this.addButton({
            text: params.text,
            switch_inline_query_current_chat: params.query
        });
    }
    /** Generate button that will prompt user to select one of their chats */
    switchToChatButton(params) {
        return this.addButton({
            text: params.text,
            switch_inline_query: params.query
        });
    }
    /** Generate game button */
    gameButton(params) {
        return this.addWideButton({
            text: params.text,
            callback_game: params.game
        });
    }
    /** Generate pay button */
    payButton(params) {
        return this.addWideButton({
            pay: true,
            text: params.text
        });
    }
    /** Generate login button */
    loginButton(params) {
        return this.addButton({
            login_url: params.loginUrl,
            text: params.text
        });
    }
    /** Save current row of buttons in the general rows */
    row() {
        if (this.currentRow.length === 0) {
            return this;
        }
        this.rows.push(this.currentRow);
        this.currentRow = [];
        return this;
    }
    addButton(button) {
        this.currentRow.push(button);
        return this;
    }
    addWideButton(button) {
        if (this.currentRow.length !== 0) {
            this.row();
        }
        this.addButton(button);
        return this.row();
    }
    /** Clone current builder to new instance */
    clone() {
        const builder = new InlineKeyboardBuilder();
        builder.rows = [...this.rows];
        builder.currentRow = [...this.currentRow];
        return builder;
    }
    /** Returns JSON which is compatible with Telegram's `InlineKeyboardMarkup` interface */
    toJSON() {
        const buttons = this.currentRow.length !== 0
            ? [...this.rows, this.currentRow]
            : this.rows;
        return {
            inline_keyboard: buttons
        };
    }
    toString() {
        return JSON.stringify(this);
    }
}
exports.InlineKeyboardBuilder = InlineKeyboardBuilder;
(0, inspectable_1.inspectable)(InlineKeyboardBuilder, {
    serialize(builder) {
        return builder.toJSON();
    }
});
