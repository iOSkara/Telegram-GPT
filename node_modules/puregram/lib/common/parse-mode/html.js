"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTML = void 0;
const escapeHtml = (source) => (source.replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;'));
/** HTML parse mode */
class HTML {
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Escape all the danger characters */
    static escape(source) {
        return escapeHtml(source);
    }
    /** @deprecated use `HTML.escape` instead */
    static raw(source) {
        return HTML.escape(source);
    }
    /** Bold text */
    static bold(source, escape = true) {
        return `<b>${escape ? HTML.escape(source) : source}</b>`;
    }
    /** Italic text */
    static italic(source, escape = true) {
        return `<i>${escape ? HTML.escape(source) : source}</i>`;
    }
    /** Underlined text */
    static underline(source, escape = true) {
        return `<u>${escape ? HTML.escape(source) : source}</u>`;
    }
    /** Strikethrough text */
    static strikethrough(source, escape = true) {
        return `<s>${escape ? HTML.escape(source) : source}</s>`;
    }
    /** Spoilered text */
    static spoiler(source, escape = true) {
        return `<span class="tg-spoiler">${escape ? HTML.escape(source) : source}</span>`;
    }
    /** URL with text */
    static url(source, link, escape = true) {
        return `<a href="${link}">${escape ? HTML.escape(source) : source}</a>`;
    }
    /** Mention the user */
    static mention(source, id, escape = true) {
        return `<a href="tg://user?id=${id}">${escape ? HTML.escape(source) : source}</a>`;
    }
    /** Preformatted code */
    static code(source, language, escape = true) {
        const additional = (language
            ? ` class="language-${language}"`
            : '');
        return `<code${additional}>${escape ? HTML.escape(source) : source}</code>`;
    }
    /** Preformatted code */
    static pre(source, escape = true) {
        return `<pre>${escape ? HTML.escape(source) : source}</pre>`;
    }
}
exports.HTML = HTML;
HTML.parseMode = 'HTML';
