"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Markdown = void 0;
const helpers_1 = require("../../utils/helpers");
/** Markdown parse mode */
class Markdown {
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** @deprecated use `Markdown.escape` instead */
    static raw(source) {
        return Markdown.escape(source);
    }
    /** Escape all the danger characters */
    static escape(source) {
        return (0, helpers_1.replaceChars)(source, ['*', '_', '[', ']', '`']);
    }
    /** Bold text */
    static bold(source, escape = true) {
        return `*${escape ? (0, helpers_1.replaceChars)(source, '*') : source}*`;
    }
    /** Italic text */
    static italic(source, escape = true) {
        return `_${escape ? (0, helpers_1.replaceChars)(source, '_') : source}_`;
    }
    /** URL with text */
    static url(source, link, escape = true) {
        return `[${escape ? (0, helpers_1.replaceChars)(source, '[]') : source}](${link})`;
    }
    /** Mention the user */
    static mention(source, id, escape = true) {
        return `[${escape ? (0, helpers_1.replaceChars)(source, '[]') : source}](tg://user?id=${id})`;
    }
    /** Preformatted code */
    static code(source, escape = true) {
        return `\`${escape ? (0, helpers_1.replaceChars)(source, '`') : source}\``;
    }
    /** Preformatted code */
    static pre(source, language) {
        const quotes = '```';
        return `${quotes}${language || ''}\n${source}\n${quotes}`;
    }
}
exports.Markdown = Markdown;
Markdown.parseMode = 'Markdown';
