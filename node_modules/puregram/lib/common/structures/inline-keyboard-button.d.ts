import * as Interfaces from '../../generated/telegram-interfaces';
import { Structure } from '../../types/interfaces';
import { LoginUrl } from './login-url';
import { CallbackGame } from './callback-game';
export declare class InlineKeyboardButton implements Structure {
    private payload;
    constructor(payload: Interfaces.TelegramInlineKeyboardButton);
    get [Symbol.toStringTag](): string;
    /** Label text on the button */
    get text(): string;
    /** HTTP or tg:// url to be opened when button is pressed */
    get url(): string | undefined;
    /**
     * An HTTP URL used to automatically authorize the user.
     * Can be used as a replacement for the Telegram Login Widget.
     */
    get loginUrl(): LoginUrl | undefined;
    /**
     * Data to be sent in a callback query to the bot when button is pressed,
     * 1-64 bytes
     */
    get callbackData(): string | undefined;
    /**
     * If set, pressing the button will prompt the user to select one of their
     * chats, open that chat and insert the bot's username and the specified
     * inline query in the input field. Can be empty, in which case just the
     * bot's username will be inserted.
     *
     * **Note**: This offers an easy way for users to start using your bot in
     * inline mode when they are currently in a private chat with it. Especially
     * useful when combined with `switch_pm…` actions – in this case the user will
     * be automatically returned to the chat they switched from, skipping the
     * chat selection screen.
     */
    get switchInlineQuery(): string | undefined;
    /**
     * If set, pressing the button will insert the bot's username and the
     * specified inline query in the current chat's input field. Can be empty, in
     * which case only the bot's username will be inserted.
     *
     * This offers a quick way for the user to open your bot in inline mode in
     * the same chat – good for selecting something from multiple options.
     */
    get switchInlineQueryCurrentChat(): string | undefined;
    /**
     * Description of the game that will be launched when the user presses the
     * button.
     *
     * **NOTE**: This type of button **must** always be the first button in the
     * first row.
     */
    get callbackGame(): CallbackGame | undefined;
    /**
     * Specify `true`, to send a Pay button.
     *
     * **NOTE**: This type of button **must** always be the first button in the first row.
     */
    get pay(): boolean | undefined;
    toJSON(): Interfaces.TelegramInlineKeyboardButton;
}
