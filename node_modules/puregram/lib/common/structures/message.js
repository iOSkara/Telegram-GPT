"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../../utils/helpers");
const user_1 = require("./user");
const chat_1 = require("./chat");
const forwarded_message_1 = require("./forwarded-message");
const message_entity_1 = require("./message-entity");
const photo_size_1 = require("./photo-size");
const contact_1 = require("./contact");
const game_1 = require("./game");
const poll_1 = require("./poll");
const venue_1 = require("./venue");
const location_1 = require("./location");
const invoice_1 = require("./invoice");
const dice_1 = require("./dice");
const successful_payment_1 = require("./successful-payment");
const passport_data_1 = require("./passport-data");
const inline_keyboard_markup_1 = require("./inline-keyboard-markup");
const message_auto_delete_timer_changed_1 = require("./message-auto-delete-timer-changed");
const video_chat_ended_1 = require("./video-chat-ended");
const video_chat_participants_invited_1 = require("./video-chat-participants-invited");
const video_chat_started_1 = require("./video-chat-started");
const video_chat_scheduled_1 = require("./video-chat-scheduled");
const proximity_alert_triggered_1 = require("./proximity-alert-triggered");
const web_app_data_1 = require("./web-app-data");
const forum_topic_created_1 = require("./forum-topic-created");
const forum_topic_edited_1 = require("./forum-topic-edited");
const forum_topic_closed_1 = require("./forum-topic-closed");
const forum_topic_reopened_1 = require("./forum-topic-reopened");
const attachments_1 = require("../attachments");
const write_access_allowed_1 = require("./write-access-allowed");
const general_forum_topic_hidden_1 = require("./general-forum-topic-hidden");
const general_forum_topic_unhidden_1 = require("./general-forum-topic-unhidden");
const user_shared_1 = require("./user-shared");
const chat_shared_1 = require("./chat-shared");
/** This object represents a message. */
class Message {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Unique message identifier inside this chat */
    get id() {
        return this.payload.message_id;
    }
    /** Unique identifier of a message thread to which the message belongs; for supergroups only */
    get threadId() {
        return this.payload.message_thread_id;
    }
    /** Sender, empty for messages sent to channels */
    get from() {
        const { from } = this.payload;
        if (!from) {
            return;
        }
        return new user_1.User(from);
    }
    /**
     * Sender of the message, sent on behalf of a chat.
     * The channel itself for channel messages.
     * The supergroup itself for messages from anonymous group administrators.
     * The linked channel for messages automatically forwarded to the discussion group
     */
    get senderChat() {
        const { sender_chat } = this.payload;
        if (!sender_chat) {
            return;
        }
        return new chat_1.Chat(sender_chat);
    }
    /** Date the message was sent in Unix time */
    get createdAt() {
        return this.payload.date;
    }
    /** Conversation the message belongs to */
    get chat() {
        return new chat_1.Chat(this.payload.chat);
    }
    /** @deprecated use `forwardedMessage` instead */
    get forwardMessage() {
        return this.forwardedMessage;
    }
    /** Forwarded message if there is any */
    get forwardedMessage() {
        const { forward_date } = this.payload;
        if (!forward_date) {
            return;
        }
        return new forwarded_message_1.ForwardedMessage(this.payload);
    }
    /** `true`, if the message is sent to a forum topic */
    isTopicMessage() {
        return this.payload.is_topic_message;
    }
    /** `true`, if the message is a channel post that was automatically forwarded to the connected discussion group */
    isAutomaticForward() {
        return this.payload.is_automatic_forward;
    }
    /** For replies, the original message */
    get replyMessage() {
        const { reply_to_message } = this.payload;
        if (!reply_to_message) {
            return;
        }
        return new Message(reply_to_message);
    }
    /** Bot through which the message was sent */
    get viaBot() {
        const { via_bot } = this.payload;
        if (!via_bot) {
            return;
        }
        return new user_1.User(via_bot);
    }
    /** Date the message was last edited in Unix time */
    get updatedAt() {
        return this.payload.edit_date;
    }
    /** `true`, if the message can't be forwarded */
    hasProtectedContent() {
        return this.payload.has_protected_content;
    }
    /** The unique identifier of a media message group this message belongs to */
    get mediaGroupId() {
        return this.payload.media_group_id;
    }
    /**
     * Signature of the post author for messages in channels,
     * or the custom title of an anonymous group administrator
     */
    get authorSignature() {
        return this.payload.author_signature;
    }
    /**
     * For text messages, the actual UTF-8 text of the message, 0-4096 characters
     */
    get text() {
        return this.payload.text;
    }
    /**
     * For text messages, special entities like usernames, URLs, bot commands,
     * etc. that appear in the text
     */
    get entities() {
        const { entities } = this.payload;
        if (!entities) {
            return;
        }
        return entities.map(entity => new message_entity_1.MessageEntity(entity));
    }
    /**
     * Attachments
     *
     * I would like to create a function like
     * `getMessageAttachment<Audio>('audio')`
     * which automatically takes `audio` from `this.payload`
     * and if it exists creates `new Audio(audio)`
     *
     * :(
     */
    /**
     * Message is an animation, information about the animation. For backward
     * compatibility, when this field is set, the `document` field will also be set
     */
    get animation() {
        const { animation } = this.payload;
        if (!animation) {
            return;
        }
        return new attachments_1.AnimationAttachment(animation);
    }
    /** Message is an audio file, information about the file */
    get audio() {
        const { audio } = this.payload;
        if (!audio) {
            return;
        }
        return new attachments_1.AudioAttachment(audio);
    }
    /** Message is a general file, information about the file */
    get document() {
        const { document } = this.payload;
        if (!document) {
            return;
        }
        return new attachments_1.DocumentAttachment(document);
    }
    /** Message is a photo, available sizes of the photo */
    get photo() {
        const { photo } = this.payload;
        if (!photo) {
            return;
        }
        return photo.map(size => new photo_size_1.PhotoSize(size));
    }
    /** Message is a sticker, information about the sticker */
    get sticker() {
        const { sticker } = this.payload;
        if (!sticker) {
            return;
        }
        return new attachments_1.StickerAttachment(sticker);
    }
    /** Message is a video, information about the video */
    get video() {
        const { video } = this.payload;
        if (!video) {
            return;
        }
        return new attachments_1.VideoAttachment(video);
    }
    /** Message is a video note, information about the video message */
    get videoNote() {
        const { video_note } = this.payload;
        if (!video_note) {
            return;
        }
        return new attachments_1.VideoNoteAttachment(video_note);
    }
    /** Message is a voice message, information about the file */
    get voice() {
        const { voice } = this.payload;
        if (!voice) {
            return;
        }
        return new attachments_1.VoiceAttachment(voice);
    }
    /**
     * Caption for the animation, audio, document, photo, video or voice,
     * 0-1024 characters
     */
    get caption() {
        return this.payload.caption;
    }
    /**
     * For messages with a caption, special entities like usernames, URLs, bot
     * commands, etc. that appear in the caption
     */
    get captionEntities() {
        const { caption_entities } = this.payload;
        if (!caption_entities) {
            return;
        }
        return caption_entities.map(entity => new message_entity_1.MessageEntity(entity));
    }
    /** `true`, if the message media is covered by a spoiler animation */
    hasMediaSpoiler() {
        return this.payload.has_media_spoiler;
    }
    /** Message is a shared contact, information about the contact */
    get contact() {
        const { contact } = this.payload;
        if (!contact) {
            return;
        }
        return new contact_1.Contact(contact);
    }
    /** Message is a dice with random value from 1 to 6 */
    get dice() {
        const { dice } = this.payload;
        if (!dice) {
            return;
        }
        return new dice_1.Dice(dice);
    }
    /** Message is a game, information about the game */
    get game() {
        const { game } = this.payload;
        if (!game) {
            return;
        }
        return new game_1.Game(game);
    }
    /** Message is a native poll, information about the poll */
    get poll() {
        const { poll } = this.payload;
        if (!poll) {
            return;
        }
        return new poll_1.Poll(poll);
    }
    /**
     * Message is a venue, information about the venue.
     * For backward compatibility, when this field is set,
     * the `location` field will also be set
     */
    get venue() {
        const { venue } = this.payload;
        if (!venue) {
            return;
        }
        return new venue_1.Venue(venue);
    }
    /** Message is a shared location, information about the location */
    get location() {
        const { location } = this.payload;
        if (!location) {
            return;
        }
        return new location_1.Location(location);
    }
    /**
     * Inline keyboard attached to the message.
     *
     * `login_url` buttons are represented as ordinary `url` buttons.
     */
    get replyMarkup() {
        const { reply_markup } = this.payload;
        if (!reply_markup) {
            return;
        }
        return new inline_keyboard_markup_1.InlineKeyboardMarkup(reply_markup);
    }
    /** The domain name of the website on which the user has logged in. */
    get connectedWebsite() {
        return this.payload.connected_website;
    }
    /** Telegram Passport data */
    get passportData() {
        const { passport_data } = this.payload;
        if (!passport_data) {
            return;
        }
        return new passport_data_1.PassportData(passport_data);
    }
    // Events
    /**
     * New members that were added to the group or supergroup and information
     * about them (the bot itself may be one of these members)
     */
    get newChatMembers() {
        const { new_chat_members } = this.payload;
        if (!new_chat_members) {
            return;
        }
        return new_chat_members.map(member => new user_1.User(member));
    }
    /**
     * A member was removed from the group, information about them (this member
     * may be the bot itself)
     */
    get leftChatMember() {
        const { left_chat_member } = this.payload;
        if (!left_chat_member) {
            return;
        }
        return new user_1.User(left_chat_member);
    }
    /** A chat title was changed to this value */
    get newChatTitle() {
        return this.payload.new_chat_title;
    }
    /** A chat photo was change to this value */
    get newChatPhoto() {
        const { new_chat_photo } = this.payload;
        if (!new_chat_photo) {
            return;
        }
        return new_chat_photo.map(size => new photo_size_1.PhotoSize(size));
    }
    /** Service message: the chat photo was deleted */
    get deleteChatPhoto() {
        return this.payload.delete_chat_photo;
    }
    /** Service message: the group has been created */
    get groupChatCreated() {
        return this.payload.group_chat_created;
    }
    /**
     * Service message: the supergroup has been created. This field can't be
     * received in a message coming through updates, because bot can't be a
     * member of a supergroup when it is created. It can only be found in
     * `replyMessage` if someone replies to a very first message in a
     * directly created supergroup.
     */
    get supergroupChatCreated() {
        return this.payload.supergroup_chat_created;
    }
    /** Service message: auto-delete timer settings changed in the chat */
    get messageAutoDeleteTimerChanged() {
        const { message_auto_delete_timer_changed } = this.payload;
        if (!message_auto_delete_timer_changed) {
            return;
        }
        return new message_auto_delete_timer_changed_1.MessageAutoDeleteTimerChanged(message_auto_delete_timer_changed);
    }
    /**
     * Service message: the channel has been created. This field can't be
     * received in a message coming through updates, because bot can't be a
     * member of a channel when it is created. It can only be found in
     * `replyMessage` if someone replies to a very first message in a channel.
     */
    get channelChatCreated() {
        return this.payload.channel_chat_created;
    }
    /**
     * The group has been migrated to a supergroup with the specified identifier.
     * This number may be greater than 32 bits and some programming languages may
     * have difficulty/silent defects in interpreting it. But it is smaller than
     * 52 bits, so a signed 64 bit integer or double-precision float type are
     * safe for storing this identifier.
     */
    get migrateToChatId() {
        return this.payload.migrate_to_chat_id;
    }
    /**
     * The supergroup has been migrated from a group with the specified
     * identifier. This number may be greater than 32 bits and some programming
     * languages may have difficulty/silent defects in interpreting it. But it is
     * smaller than 52 bits, so a signed 64 bit integer or double-precision float
     * type are safe for storing this identifier.
     */
    get migrateFromChatId() {
        return this.payload.migrate_from_chat_id;
    }
    /**
     * Specified message was pinned. Note that the Message object in this field
     * will not contain further `replyMessage` fields even if it is itself a
     * reply.
     */
    get pinnedMessage() {
        const { pinned_message } = this.payload;
        if (!pinned_message) {
            return;
        }
        return new Message(pinned_message);
    }
    /** Message is an invoice for a payment, information about the invoice */
    get invoice() {
        const { invoice } = this.payload;
        if (!invoice) {
            return;
        }
        return new invoice_1.Invoice(invoice);
    }
    /**
     * Message is a service message about a successful payment,
     * information about the payment.
     */
    get successfulPayment() {
        const { successful_payment } = this.payload;
        if (!successful_payment) {
            return;
        }
        return new successful_payment_1.SuccessfulPayment(successful_payment);
    }
    /** Service message: a user was shared with the bot */
    get userShared() {
        const { user_shared } = this.payload;
        if (!user_shared) {
            return;
        }
        return new user_shared_1.UserShared(user_shared);
    }
    /** Service message: a chat was shared with the bot */
    get chatShared() {
        const { chat_shared } = this.payload;
        if (!chat_shared) {
            return;
        }
        return new chat_shared_1.ChatShared(chat_shared);
    }
    /**
     * Service message.
     * A user in the chat triggered another user's proximity alert
     * while sharing Live Location.
     */
    get proximityAlertTriggered() {
        const { proximity_alert_triggered } = this.payload;
        if (!proximity_alert_triggered) {
            return;
        }
        return new proximity_alert_triggered_1.ProximityAlertTriggered(proximity_alert_triggered);
    }
    /** Service message: the user allowed the bot added to the attachment menu to write messages */
    get writeAccessAllowed() {
        const { write_access_allowed } = this.payload;
        if (!write_access_allowed) {
            return;
        }
        return new write_access_allowed_1.WriteAccessAllowed(write_access_allowed);
    }
    /** Service message: forum topic created */
    get forumTopicCreated() {
        const { forum_topic_created } = this.payload;
        if (!forum_topic_created) {
            return;
        }
        return new forum_topic_created_1.ForumTopicCreated(forum_topic_created);
    }
    /** Service message: forum topic edited */
    get forumTopicEdited() {
        const { forum_topic_edited } = this.payload;
        if (!forum_topic_edited) {
            return;
        }
        return new forum_topic_edited_1.ForumTopicEdited(forum_topic_edited);
    }
    /** Service message: forum topic closed */
    get forumTopicClosed() {
        const { forum_topic_closed } = this.payload;
        if (!forum_topic_closed) {
            return;
        }
        return new forum_topic_closed_1.ForumTopicClosed(forum_topic_closed);
    }
    /** Service message: forum topic reopened */
    get forumTopicReopened() {
        const { forum_topic_reopened } = this.payload;
        if (!forum_topic_reopened) {
            return;
        }
        return new forum_topic_reopened_1.ForumTopicReopened(forum_topic_reopened);
    }
    /** Service message: the 'General' forum topic hidden */
    get generalForumTopicHidden() {
        const { general_forum_topic_hidden } = this.payload;
        if (!general_forum_topic_hidden) {
            return;
        }
        return new general_forum_topic_hidden_1.GeneralForumTopicHidden(general_forum_topic_hidden);
    }
    /** Service message: the 'General' forum topic unhidden */
    get generalForumTopicUnhidden() {
        const { general_forum_topic_unhidden } = this.payload;
        if (!general_forum_topic_unhidden) {
            return;
        }
        return new general_forum_topic_unhidden_1.GeneralForumTopicUnhidden(general_forum_topic_unhidden);
    }
    /** Service message: video chat scheduled */
    get videoChatScheduled() {
        const { video_chat_scheduled } = this.payload;
        if (!video_chat_scheduled) {
            return;
        }
        return new video_chat_scheduled_1.VideoChatScheduled(video_chat_scheduled);
    }
    /** Service message: video chat started */
    get videoChatStarted() {
        const { video_chat_started } = this.payload;
        if (!video_chat_started) {
            return;
        }
        return new video_chat_started_1.VideoChatStarted(video_chat_started);
    }
    /** Service message: video chat ended */
    get videoChatEnded() {
        const { video_chat_ended } = this.payload;
        if (!video_chat_ended) {
            return;
        }
        return new video_chat_ended_1.VideoChatEnded(video_chat_ended);
    }
    /** Service message: new participants invited to a video chat */
    get videoChatParticipantsInvited() {
        const { video_chat_participants_invited } = this.payload;
        if (!video_chat_participants_invited) {
            return;
        }
        return new video_chat_participants_invited_1.VideoChatParticipantsInvited(video_chat_participants_invited);
    }
    /** Service message: data sent by a Web App */
    get webAppData() {
        const { web_app_data } = this.payload;
        if (!web_app_data) {
            return;
        }
        return new web_app_data_1.WebAppData(web_app_data);
    }
    toJSON() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17;
        return {
            message_id: this.id,
            from: (_a = this.from) === null || _a === void 0 ? void 0 : _a.toJSON(),
            sender_chat: (_b = this.senderChat) === null || _b === void 0 ? void 0 : _b.toJSON(),
            date: this.createdAt,
            chat: this.chat.toJSON(),
            created_at: this.createdAt,
            forward_from: (_d = (_c = this.forwardedMessage) === null || _c === void 0 ? void 0 : _c.from) === null || _d === void 0 ? void 0 : _d.toJSON(),
            forward_from_chat: (_f = (_e = this.forwardedMessage) === null || _e === void 0 ? void 0 : _e.chat) === null || _f === void 0 ? void 0 : _f.toJSON(),
            forward_from_message_id: (_g = this.forwardedMessage) === null || _g === void 0 ? void 0 : _g.id,
            forward_signature: (_h = this.forwardedMessage) === null || _h === void 0 ? void 0 : _h.signature,
            forward_sender_name: (_j = this.forwardedMessage) === null || _j === void 0 ? void 0 : _j.senderName,
            forward_date: (_k = this.forwardedMessage) === null || _k === void 0 ? void 0 : _k.createdAt,
            is_automatic_forward: this.isAutomaticForward(),
            reply_to_message: (_l = this.replyMessage) === null || _l === void 0 ? void 0 : _l.toJSON(),
            via_bot: (_m = this.viaBot) === null || _m === void 0 ? void 0 : _m.toJSON(),
            edit_date: this.updatedAt,
            has_protected_content: this.hasProtectedContent(),
            media_group_id: this.mediaGroupId,
            author_signature: this.authorSignature,
            text: this.text,
            entities: (_o = this.entities) === null || _o === void 0 ? void 0 : _o.map(entity => entity.toJSON()),
            // Attachments
            animation: (_p = this.animation) === null || _p === void 0 ? void 0 : _p.toJSON(),
            audio: (_q = this.audio) === null || _q === void 0 ? void 0 : _q.toJSON(),
            document: (_r = this.document) === null || _r === void 0 ? void 0 : _r.toJSON(),
            photo: (_s = this.photo) === null || _s === void 0 ? void 0 : _s.map(size => size.toJSON()),
            sticker: (_t = this.sticker) === null || _t === void 0 ? void 0 : _t.toJSON(),
            video: (_u = this.video) === null || _u === void 0 ? void 0 : _u.toJSON(),
            video_note: (_v = this.videoNote) === null || _v === void 0 ? void 0 : _v.toJSON(),
            voice: (_w = this.voice) === null || _w === void 0 ? void 0 : _w.toJSON(),
            caption: this.caption,
            caption_entities: (_x = this.captionEntities) === null || _x === void 0 ? void 0 : _x.map(entity => entity.toJSON()),
            contact: (_y = this.contact) === null || _y === void 0 ? void 0 : _y.toJSON(),
            dice: (_z = this.dice) === null || _z === void 0 ? void 0 : _z.toJSON(),
            game: (_0 = this.game) === null || _0 === void 0 ? void 0 : _0.toJSON(),
            poll: (_1 = this.poll) === null || _1 === void 0 ? void 0 : _1.toJSON(),
            venue: (_2 = this.venue) === null || _2 === void 0 ? void 0 : _2.toJSON(),
            location: (_3 = this.location) === null || _3 === void 0 ? void 0 : _3.toJSON(),
            // Events
            new_chat_members: (_4 = this.newChatMembers) === null || _4 === void 0 ? void 0 : _4.map(user => user.toJSON()),
            left_chat_member: (_5 = this.leftChatMember) === null || _5 === void 0 ? void 0 : _5.toJSON(),
            new_chat_title: this.newChatTitle,
            new_chat_photo: (_6 = this.newChatPhoto) === null || _6 === void 0 ? void 0 : _6.map(size => size.toJSON()),
            delete_chat_photo: this.deleteChatPhoto,
            group_chat_created: this.groupChatCreated,
            supergroup_chat_created: this.supergroupChatCreated,
            channel_chat_created: this.channelChatCreated,
            message_auto_delete_timer_changed: (_7 = this.messageAutoDeleteTimerChanged) === null || _7 === void 0 ? void 0 : _7.toJSON(),
            migrate_to_chat_id: this.migrateToChatId,
            migrate_from_chat_id: this.migrateFromChatId,
            pinned_message: (_8 = this.pinnedMessage) === null || _8 === void 0 ? void 0 : _8.toJSON(),
            invoice: (_9 = this.invoice) === null || _9 === void 0 ? void 0 : _9.toJSON(),
            successful_payment: (_10 = this.successfulPayment) === null || _10 === void 0 ? void 0 : _10.toJSON(),
            connected_website: this.connectedWebsite,
            passport_data: (_11 = this.passportData) === null || _11 === void 0 ? void 0 : _11.toJSON(),
            video_chat_scheduled: (_12 = this.videoChatScheduled) === null || _12 === void 0 ? void 0 : _12.toJSON(),
            video_chat_started: (_13 = this.videoChatStarted) === null || _13 === void 0 ? void 0 : _13.toJSON(),
            video_chat_ended: (_14 = this.videoChatEnded) === null || _14 === void 0 ? void 0 : _14.toJSON(),
            video_chat_participants_invited: (_15 = this.videoChatParticipantsInvited) === null || _15 === void 0 ? void 0 : _15.toJSON(),
            web_app_data: (_16 = this.webAppData) === null || _16 === void 0 ? void 0 : _16.toJSON(),
            reply_markup: (_17 = this.replyMarkup) === null || _17 === void 0 ? void 0 : _17.toJSON()
        };
    }
}
exports.Message = Message;
(0, inspectable_1.inspectable)(Message, {
    serialize(struct) {
        const payload = {
            id: struct.id,
            from: struct.from,
            senderChat: struct.senderChat,
            createdAt: struct.createdAt,
            chat: struct.chat,
            forwardMessage: struct.forwardedMessage,
            isAutomaticForward: struct.isAutomaticForward(),
            replyMessage: struct.replyMessage,
            viaBot: struct.viaBot,
            updatedAt: struct.updatedAt,
            mediaGroupId: struct.mediaGroupId,
            authorSignature: struct.authorSignature,
            text: struct.text,
            entities: struct.entities,
            // Attachments
            animation: struct.animation,
            audio: struct.audio,
            document: struct.document,
            photo: struct.photo,
            sticker: struct.sticker,
            video: struct.video,
            videoNote: struct.videoNote,
            voice: struct.voice,
            caption: struct.caption,
            captionEntities: struct.captionEntities,
            contact: struct.contact,
            dice: struct.dice,
            game: struct.game,
            poll: struct.poll,
            venue: struct.venue,
            location: struct.location,
            // Events
            newChatMembers: struct.newChatMembers,
            leftChatMember: struct.leftChatMember,
            newChatTitle: struct.newChatTitle,
            newChatPhoto: struct.newChatPhoto,
            deleteChatPhoto: struct.deleteChatPhoto,
            groupChatCreated: struct.groupChatCreated,
            supergroupChatCreated: struct.supergroupChatCreated,
            channelChatCreated: struct.channelChatCreated,
            migrateToChatId: struct.migrateToChatId,
            migrateFromChatId: struct.migrateFromChatId,
            pinnedMessage: struct.pinnedMessage,
            invoice: struct.invoice,
            successfulPayment: struct.successfulPayment,
            connectedWebsite: struct.connectedWebsite,
            passportData: struct.passportData,
            videoChatScheduled: struct.videoChatScheduled,
            videoChatStarted: struct.videoChatStarted,
            videoChatEnded: struct.videoChatEnded,
            videoChatParticipantsInvited: struct.videoChatParticipantsInvited,
            replyMarkup: struct.replyMarkup
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
