"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageEntity = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../../utils/helpers");
const user_1 = require("./user");
/**
 * This object represents one special entity in a text message.
 * For example, hashtags, usernames, URLs, etc.
 */
class MessageEntity {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * Type of the entity.
     *
     * Can be `mention` (`@username`), `hashtag` (`#hashtag`), `cashtag`
     * (`$USD`), `bot_command` (`/start@jobs_bot`), `url`
     * (`https://telegram.org`), `email` (`do-not-reply@telegram.org`),
     * `phone_number` (`+1-212-555-0123`), `bold` (**bold text**), `italic`
     * (_italic text_), `underline` (underlined text), `strikethrough`
     * (~~strikethrough text~~), “spoiler” (spoiler message), `code` (`monowidth string`),
     * `pre` (`monowidth block`), `text_link` (for clickable text URLs), `text_mention`
     * (for users without usernames)
     */
    get type() {
        return this.payload.type;
    }
    /** Offset in UTF-16 code units to the start of the entity */
    get offset() {
        return this.payload.offset;
    }
    /** Length of the entity in UTF-16 code units */
    get length() {
        return this.payload.length;
    }
    /**
     * For `text_link` only, url that will be opened after user taps on the text
     */
    get url() {
        return this.payload.url;
    }
    /** For `text_mention` only, the mentioned user */
    get user() {
        const { user } = this.payload;
        if (!user) {
            return;
        }
        return new user_1.User(user);
    }
    /** For `pre` only, the programming language of the entity text */
    get language() {
        return this.payload.language;
    }
    /** For `custom_emoji` only, unique identifier of the custom emoji.
     *
     * Use `getCustomEmojiStickers` to get full information about the sticker */
    get customEmojiId() {
        return this.payload.custom_emoji_id;
    }
    toJSON() {
        var _a;
        return {
            type: this.type,
            offset: this.offset,
            length: this.length,
            url: this.url,
            user: (_a = this.user) === null || _a === void 0 ? void 0 : _a.toJSON(),
            language: this.language,
            custom_emoji_id: this.customEmojiId
        };
    }
}
exports.MessageEntity = MessageEntity;
(0, inspectable_1.inspectable)(MessageEntity, {
    serialize(struct) {
        const payload = {
            type: struct.type,
            offset: struct.offset,
            length: struct.length,
            url: struct.url,
            user: struct.user,
            language: struct.language,
            customEmojiId: struct.customEmojiId
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
