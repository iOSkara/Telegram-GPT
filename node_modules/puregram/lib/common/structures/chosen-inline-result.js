"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChosenInlineResult = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../../utils/helpers");
const user_1 = require("./user");
const location_1 = require("./location");
class ChosenInlineResult {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** The unique identifier for the result that was chosen */
    get resultId() {
        return this.payload.result_id;
    }
    /** The user that chose the result */
    get from() {
        return new user_1.User(this.payload.from);
    }
    /** Sender ID */
    get senderId() {
        return this.from.id;
    }
    /** Sender location, only for bots that require user location */
    get location() {
        const { location } = this.payload;
        if (!location) {
            return;
        }
        return new location_1.Location(location);
    }
    /**
     * Identifier of the sent inline message. Available only if there is an
     * inline keyboard attached to the message. Will be also received in callback
     * queries and can be used to edit the message.
     */
    get inlineMessageId() {
        return this.payload.inline_message_id;
    }
    /** The query that was used to obtain the result */
    get query() {
        return this.payload.query;
    }
    toJSON() {
        return {
            result_id: this.resultId,
            from: this.from.toJSON(),
            sender_id: this.senderId,
            location: this.location,
            inline_message_id: this.inlineMessageId,
            query: this.query
        };
    }
}
exports.ChosenInlineResult = ChosenInlineResult;
(0, inspectable_1.inspectable)(ChosenInlineResult, {
    serialize(struct) {
        const payload = {
            resultId: struct.resultId,
            from: struct.from,
            senderId: struct.senderId,
            location: struct.location,
            inlineMessageId: struct.inlineMessageId,
            query: struct.query
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
