"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreCheckoutQuery = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../../utils/helpers");
const user_1 = require("./user");
const order_info_1 = require("./order-info");
class PreCheckoutQuery {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Unique query identifier */
    get id() {
        return this.payload.id;
    }
    /** User who sent the query */
    get from() {
        return new user_1.User(this.payload.from);
    }
    /** Sender ID */
    get senderId() {
        return this.from.id;
    }
    /** Three-letter ISO 4217 currency code */
    get currency() {
        return this.payload.currency;
    }
    /**
     * Total price in the smallest units of the currency
     * (integer, not float/double). For example, for a price of
     * `US$ 1.45` pass `amount = 145`. See the `exp` parameter in
     * [currencies.json](https://core.telegram.org/bots/payments/currencies.json),
     * it shows the number of digits past the decimal point for each currency
     * (2 for the majority of currencies).
     */
    get totalAmount() {
        return this.payload.total_amount;
    }
    /** Bot specified invoice payload */
    get invoicePayload() {
        return this.payload.invoice_payload;
    }
    /** Identifier of the shipping option chosen by the user */
    get shippingOptionId() {
        return this.payload.shipping_option_id;
    }
    /** Order info provided by the user */
    get orderInfo() {
        const { order_info } = this.payload;
        if (!order_info) {
            return;
        }
        return new order_info_1.OrderInfo(order_info);
    }
    toJSON() {
        var _a;
        return {
            id: this.id,
            from: this.from.toJSON(),
            currency: this.currency,
            total_amount: this.totalAmount,
            invoice_payload: this.invoicePayload,
            shipping_option_id: this.shippingOptionId,
            order_info: (_a = this.orderInfo) === null || _a === void 0 ? void 0 : _a.toJSON()
        };
    }
}
exports.PreCheckoutQuery = PreCheckoutQuery;
(0, inspectable_1.inspectable)(PreCheckoutQuery, {
    serialize(struct) {
        const payload = {
            id: struct.id,
            from: struct.from,
            senderId: struct.senderId,
            currency: struct.currency,
            totalAmount: struct.totalAmount,
            invoicePayload: struct.invoicePayload,
            shippingOptionId: struct.shippingOptionId,
            orderInfo: struct.orderInfo
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
