"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForwardedMessage = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../../utils/helpers");
const user_1 = require("./user");
const chat_1 = require("./chat");
/** This object represents a forwarded message. */
class ForwardedMessage {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * For messages forwarded from channels, identifier of the original message
     * in the channel
     */
    get id() {
        return this.payload.forward_from_message_id;
    }
    /** For forwarded messages, sender of the original message */
    get from() {
        const { forward_from } = this.payload;
        if (!forward_from) {
            return;
        }
        return new user_1.User(forward_from);
    }
    /**
     * For messages forwarded from channels, information about the original
     * channel
     */
    get chat() {
        const { forward_from_chat } = this.payload;
        if (!forward_from_chat) {
            return;
        }
        return new chat_1.Chat(forward_from_chat);
    }
    /**
     * For messages forwarded from channels, signature of the post author
     * if present
     */
    get signature() {
        return this.payload.forward_signature;
    }
    /**
     * Sender's name for messages forwarded from users who disallow adding a link
     * to their account in forwarded messages
     */
    get senderName() {
        return this.payload.forward_sender_name;
    }
    /**
     * For forwarded messages, date the original message was sent in Unix time
     */
    get createdAt() {
        return this.payload.forward_date;
    }
    /** `true`, if the message is a channel post that was automatically forwarded to the connected discussion group */
    isAutomatic() {
        return this.payload.is_automatic_forward;
    }
}
exports.ForwardedMessage = ForwardedMessage;
(0, inspectable_1.inspectable)(ForwardedMessage, {
    serialize(struct) {
        const payload = {
            id: struct.id,
            from: struct.from,
            chat: struct.chat,
            signature: struct.signature,
            senderName: struct.senderName,
            createdAt: struct.createdAt,
            isAutomatic: struct.isAutomatic()
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
