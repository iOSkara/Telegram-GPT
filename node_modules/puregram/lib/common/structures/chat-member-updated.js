"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatMemberUpdated = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../../utils/helpers");
const chat_1 = require("./chat");
const chat_invite_link_1 = require("./chat-invite-link");
const chat_member_1 = require("./chat-member");
const user_1 = require("./user");
/** This object represents changes in the status of a chat member. */
class ChatMemberUpdated {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Chat the user belongs to */
    get chat() {
        return new chat_1.Chat(this.payload.chat);
    }
    /** Performer of the action, which resulted in the change */
    get from() {
        return new user_1.User(this.payload.from);
    }
    /** Date the change was done in Unix time */
    get date() {
        return this.payload.date;
    }
    /** Previous information about the chat member */
    get oldChatMember() {
        return new chat_member_1.ChatMember(this.payload.old_chat_member);
    }
    /** New information about the chat member */
    get newChatMember() {
        return new chat_member_1.ChatMember(this.payload.new_chat_member);
    }
    /**
     * Chat invite link, which was used by the user to join the chat;
     * for joining by invite link events only.
     */
    get inviteLink() {
        const { invite_link } = this.payload;
        if (!invite_link) {
            return;
        }
        return new chat_invite_link_1.ChatInviteLink(invite_link);
    }
    toJSON() {
        var _a;
        return {
            chat: this.chat.toJSON(),
            from: this.from.toJSON(),
            date: this.date,
            old_chat_member: this.oldChatMember.toJSON(),
            new_chat_member: this.newChatMember.toJSON(),
            invite_link: (_a = this.inviteLink) === null || _a === void 0 ? void 0 : _a.toJSON()
        };
    }
}
exports.ChatMemberUpdated = ChatMemberUpdated;
(0, inspectable_1.inspectable)(ChatMemberUpdated, {
    serialize(struct) {
        const payload = {
            chat: struct.chat,
            from: struct.from,
            date: struct.date,
            oldChatMember: struct.oldChatMember,
            newChatMember: struct.newChatMember,
            inviteLink: struct.inviteLink
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
