"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game = void 0;
const inspectable_1 = require("inspectable");
const attachments_1 = require("../attachments");
const helpers_1 = require("../../utils/helpers");
const photo_size_1 = require("./photo-size");
const message_entity_1 = require("./message-entity");
/** This object represents a game. */
class Game {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Title of the game */
    get title() {
        return this.payload.title;
    }
    /** Description of the game */
    get description() {
        return this.payload.description;
    }
    /** Photo that will be displayed in the game message in chats. */
    get photo() {
        const { photo } = this.payload;
        if (!photo) {
            return;
        }
        return photo.map(element => new photo_size_1.PhotoSize(element));
    }
    /**
     * Brief description of the game or high scores included in the game message
     * Can be automatically edited to include current high scores for the game
     * when the bot calls `setGameScore`, or manually edited using
     * `editMessageText`. 0-4096 characters.
     */
    get text() {
        return this.payload.text;
    }
    /**
     * Special entities that appear in text, such as usernames, URLs, bot
     * commands, etc.
     */
    get textEntities() {
        const { text_entities } = this.payload;
        if (!text_entities) {
            return;
        }
        return text_entities.map(entity => new message_entity_1.MessageEntity(entity));
    }
    /**
     * Animation that will be displayed in the game message in chats.
     * Upload via BotFather
     */
    get animation() {
        const { animation } = this.payload;
        if (!animation) {
            return;
        }
        return new attachments_1.AnimationAttachment(animation);
    }
    toJSON() {
        var _a, _b, _c, _d;
        return {
            title: this.title,
            description: this.description,
            photo: (_b = (_a = this.photo) === null || _a === void 0 ? void 0 : _a.map(size => size.toJSON())) !== null && _b !== void 0 ? _b : [],
            text: this.text,
            text_entities: (_c = this.textEntities) === null || _c === void 0 ? void 0 : _c.map(entity => entity.toJSON()),
            animation: (_d = this.animation) === null || _d === void 0 ? void 0 : _d.toJSON()
        };
    }
}
exports.Game = Game;
(0, inspectable_1.inspectable)(Game, {
    serialize(struct) {
        const payload = {
            title: struct.title,
            description: struct.description,
            photo: struct.photo,
            text: struct.text,
            textEntities: struct.textEntities,
            animation: struct.animation
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
