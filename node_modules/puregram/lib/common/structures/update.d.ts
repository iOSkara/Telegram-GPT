import * as Interfaces from '../../generated/telegram-interfaces';
import { Structure } from '../../types/interfaces';
import { CallbackQuery } from './callback-query';
import { ChatJoinRequest } from './chat-join-request';
import { ChatMemberUpdated } from './chat-member-updated';
import { ChosenInlineResult } from './chosen-inline-result';
import { InlineQuery } from './inline-query';
import { Message } from './message';
import { Poll } from './poll';
import { PollAnswer } from './poll-answer';
import { PreCheckoutQuery } from './pre-checkout-query';
import { ShippingQuery } from './shipping-query';
/**
 * This object represents an incoming update.
 *
 * At most **one** of the optional parameters can be present in any given
 * update.
 */
export declare class Update implements Structure {
    private payload;
    constructor(payload: Interfaces.TelegramUpdate);
    get [Symbol.toStringTag](): string;
    /**
     * The update's unique identifier.
     * Update identifiers start from a certain positive number and increase
     * sequentially. This ID becomes especially handy if you're using
     * **Webhooks**, since it allows you to ignore repeated updates or to restore
     * the correct update sequence, should they get out of order. If there are no
     * new updates for at least a week, then identifier of the next update will
     * be chosen randomly instead of sequentially.
     */
    get id(): number;
    /**
     * New incoming message of any kind — text, photo, sticker, etc.
     */
    get message(): Message | undefined;
    /** New version of a message that is known to the bot and was edited */
    get editedMessage(): Message | undefined;
    /** New incoming channel post of any kind — text, photo, sticker, etc. */
    get channelPost(): Message | undefined;
    /** New version of a channel post that is known to the bot and was edited */
    get editedChannelPost(): Message | undefined;
    /** New incoming inline query */
    get inlineQuery(): InlineQuery | undefined;
    /**
     * The result of an inline query that was chosen by a user and sent to their
     * chat partner. Please see our documentation on the feedback collecting for
     * details on how to enable these updates for your bot.
     */
    get chosenInlineResult(): ChosenInlineResult | undefined;
    /** New incoming callback query */
    get callbackQuery(): CallbackQuery | undefined;
    /** New incoming shipping query. Only for invoices with flexible price */
    get shippingQuery(): ShippingQuery | undefined;
    /**
     * New incoming pre-checkout query. Contains full information about checkout
     */
    get preCheckoutQuery(): PreCheckoutQuery | undefined;
    /**
     * New poll state. Bots receive only updates about stopped polls and polls,
     * which are sent by the bot
     */
    get poll(): Poll | undefined;
    /**
     * A user changed their answer in a non-anonymous poll. Bots receive new
     * votes only in polls that were sent by the bot itself.
     */
    get pollAnswer(): PollAnswer | undefined;
    get myChatMember(): ChatMemberUpdated | undefined;
    get chatMember(): ChatMemberUpdated | undefined;
    get chatJoinRequest(): ChatJoinRequest | undefined;
    toJSON(): Interfaces.TelegramUpdate;
}
