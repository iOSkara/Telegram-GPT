"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineQuery = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../../utils/helpers");
const user_1 = require("./user");
const location_1 = require("./location");
/**
 * This object represents an incoming inline query.
 * When the user sends an empty query, your bot could return some default or
 * trending results.
 */
class InlineQuery {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Unique identifier for this query */
    get id() {
        return this.payload.id;
    }
    /** Sender */
    get from() {
        return new user_1.User(this.payload.from);
    }
    /** Sender location, only for bots that request user location */
    get location() {
        const { location } = this.payload;
        if (!location) {
            return;
        }
        return new location_1.Location(location);
    }
    /** Text of the query (up to 256 characters) */
    get query() {
        return this.payload.query;
    }
    /** Offset of the results to be returned, can be controlled by the bot */
    get offset() {
        return this.payload.offset;
    }
    toJSON() {
        var _a;
        return {
            id: this.id,
            from: this.from.toJSON(),
            location: (_a = this.location) === null || _a === void 0 ? void 0 : _a.toJSON(),
            query: this.query,
            offset: this.offset
        };
    }
}
exports.InlineQuery = InlineQuery;
(0, inspectable_1.inspectable)(InlineQuery, {
    serialize(struct) {
        const payload = {
            id: struct.id,
            from: struct.from,
            location: struct.location,
            query: struct.query,
            offset: struct.offset
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
