import { Message } from '../../common/structures';
import * as Interfaces from '../../generated/telegram-interfaces';
import { Structure } from '../../types/interfaces';
import { ChatPhoto } from './chat-photo';
import { ChatPermissions } from './chat-permissions';
import { ChatLocation } from './chat-location';
/** This object represents a chat. */
export declare class Chat implements Structure {
    private payload;
    constructor(payload: Interfaces.TelegramChat);
    get [Symbol.toStringTag](): string;
    /**
     * Unique identifier for this chat. This number may be greater than 32 bits
     * and some programming languages may have difficulty/silent defects in
     * interpreting it. But it is smaller than 52 bits, so a signed 64 bit
     * integer or double-precision float type are safe for storing
     * this identifier.
     */
    get id(): number;
    /**
     * Type of chat, can be either `private`, `group`, `supergroup` or `channel`
     */
    get type(): import("../../types/types").SoftString<Interfaces.TelegramChatType>;
    /** Title, for supergroups, channels and group chats */
    get title(): string | undefined;
    /** Username, for private chats, supergroups and channels if available */
    get username(): string | undefined;
    /** First name of the other party in a private chat */
    get firstName(): string | undefined;
    /** Last name of the other party in a private chat */
    get lastName(): string | undefined;
    /** `true`, if the supergroup chat is a forum (has [topics](https://telegram.org/blog/topics-in-groups-collectible-usernames#topics-in-groups) enabled) */
    isForum(): boolean | undefined;
    /**
     * Chat photo.
     *
     * Returned only in `getChat`.
     */
    get photo(): ChatPhoto | undefined;
    /**
     * If non-empty, the list of all active chat usernames; for private chats, supergroups and channels.
     *
     * Returned only in `getChat`.
     */
    get activeUsernames(): string[] | undefined;
    /**
     * Custom emoji identifier of emoji status of the other party in a private chat.
     *
     * Returned only in `getChat`.
     */
    get emojiStatusCustomEmojiId(): string | undefined;
    /**
     * Bio of the other party in a private chat.
     *
     * Returned only in `getChat`.
     */
    get bio(): string | undefined;
    /**
     * `true`, if privacy settings of the other party in the private chat allows
     * to use `tg://user?id=<user_id>` links only in chats with the user.
     *
     * Returned only in `getChat`.
     */
    hasPrivateForwards(): true | undefined;
    /**
     * `true`, if the privacy settings of the other party restrict sending voice and video note messages in the private chat.
     *
     * Returned only in `getChat`.
     */
    hasRestrictedVoiceAndVideoMessages(): boolean | undefined;
    /**
     * `true`, if users need to join the supergroup before they can send messages.
     *
     * Returned only in `getChat`.
     */
    get joinToSendMessages(): true | undefined;
    /**
     * `true`, if all users directly joining the supergroup need to be approved
     * by supergroup administrators.
     *
     * Returned only in `getChat`.
     */
    get joinByRequest(): true | undefined;
    /**
     * For supergroups, the location to which the supergroup is connected
     *
     * Returned only in `getChat`.
     */
    get location(): ChatLocation | undefined;
    /**
     * Description, for groups, supergroups and channel chats.
     *
     * Returned only in `getChat`.
     */
    get description(): string | undefined;
    /**
     * Chat invite link, for groups, supergroups and channel chats.
     * Each administrator in a chat generates their own invite links,
     * so the bot must first generate the link using `exportChatInviteLink`.
     *
     * Returned only in `getChat`.
     */
    get inviteLink(): string | undefined;
    /**
     * Pinned message, for groups, supergroups and channels.
     *
     * Returned only in `getChat`.
     */
    get pinnedMessage(): Message | undefined;
    /**
     * Default chat member permissions, for groups and supergroups.
     *
     * Returned only in `getChat`.
     */
    get permissions(): ChatPermissions | undefined;
    /**
     * For supergroups, the minimum allowed delay between consecutive messages
     * sent by each unpriviledged user.
     *
     * Returned only in `getChat`.
     */
    get slowModeDelay(): number | undefined;
    /**
     * The time after which all messages sent to the chat will be automatically deleted; in seconds.
     *
     * Returned only in `getChat`.
     */
    get messageAutoDeleteTime(): number | undefined;
    /**
     * `true`, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators.
     *
     * Returned only in `getChat`.
     */
    hasAggressiveAntiSpamEnabled(): boolean | undefined;
    /**
     * `true`, if non-administrators can only get the list of bots and administrators in the chat.
     *
     * Returned only in `getChat`.
     */
    hasHiddenMembers(): boolean | undefined;
    /**
     * `true`, if messages from the chat can't be forwarded to other chats.
     *
     * Returned only in `getChat`.
     */
    hasProtectedContent(): boolean | undefined;
    /**
     * For supergroups, name of group sticker set.
     *
     * Returned only in `getChat`.
     */
    get stickerSetName(): string | undefined;
    /**
     * `true`, if the bot can change the group sticker set.
     *
     * Returned only in `getChat`.
     */
    canSetStickerSet(): boolean | undefined;
    /**
     * Unique identifier for the linked chat,
     * i.e. the discussion group identifier for a channel and vice versa;
     * for supergroups and channel chats.
     * This identifier may be greater than 32 bits and some programming languages
     * may have difficulty/silent defects in interpreting it.
     * But it is smaller than 52 bits, so a signed 64 bit integer or double-precision
     * float type are safe for storing this identifier.
     *
     * Returned only in `getChat`.
     */
    get linkedChatId(): number | undefined;
    toJSON(): Interfaces.TelegramChat;
}
