"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StickerSet = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../../utils/helpers");
const attachments_1 = require("../attachments");
const photo_size_1 = require("./photo-size");
class StickerSet {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Sticker set name */
    get name() {
        return this.payload.name;
    }
    /** Sticker set title */
    get title() {
        return this.payload.title;
    }
    /** Type of stickers in the set, currently one of `regular`, `mask`, `custom_emoji` */
    get stickerType() {
        return this.payload.sticker_type;
    }
    /** `true`, if the sticker set contains animated stickers */
    isAnimated() {
        return this.payload.is_animated;
    }
    /** `true`, if the sticker set contains video stickers */
    isVideo() {
        return this.payload.is_video;
    }
    /** `true`, if the sticker set contains masks */
    get containsMasks() {
        return this.payload.contains_masks;
    }
    /** List of all set stickers */
    get stickers() {
        const { stickers } = this.payload;
        if (!stickers.length) {
            return;
        }
        return stickers.map(sticker => new attachments_1.StickerAttachment(sticker));
    }
    /** Sticker set thumbnail in the .WEBP or .TGS format */
    get thumbnail() {
        const { thumbnail } = this.payload;
        if (!thumbnail) {
            return;
        }
        return new photo_size_1.PhotoSize(thumbnail);
    }
    toJSON() {
        var _a, _b, _c;
        return {
            name: this.name,
            title: this.title,
            sticker_type: this.stickerType,
            is_animated: this.isAnimated(),
            is_video: this.isVideo(),
            contains_masks: this.containsMasks,
            stickers: (_b = (_a = this.stickers) === null || _a === void 0 ? void 0 : _a.map(sticker => sticker.toJSON())) !== null && _b !== void 0 ? _b : [],
            thumbnail: (_c = this.thumbnail) === null || _c === void 0 ? void 0 : _c.toJSON()
        };
    }
}
exports.StickerSet = StickerSet;
(0, inspectable_1.inspectable)(StickerSet, {
    serialize(struct) {
        const payload = {
            name: struct.name,
            title: struct.title,
            stickerType: struct.stickerType,
            isAnimated: struct.isAnimated(),
            isVideo: struct.isVideo(),
            containsMasks: struct.containsMasks,
            stickers: struct.stickers,
            thumbnail: struct.thumbnail
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
