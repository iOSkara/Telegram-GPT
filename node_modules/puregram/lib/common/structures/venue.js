"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Venue = void 0;
const inspectable_1 = require("inspectable");
const helpers_1 = require("../../utils/helpers");
const location_1 = require("./location");
/** This object represents a venue. */
class Venue {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Venue location */
    get location() {
        return new location_1.Location(this.payload.location);
    }
    /** Name of the venue */
    get title() {
        return this.payload.title;
    }
    /** Address of the venue */
    get address() {
        return this.payload.address;
    }
    /** Foursquare identifier of the venue */
    get foursquareId() {
        return this.payload.foursquare_id;
    }
    /** Foursquare type of the venue */
    get foursquareType() {
        return this.payload.foursquare_type;
    }
    /** Google Places identifier of the venue */
    get googlePlaceId() {
        return this.payload.google_place_id;
    }
    /**
     * Google Places type of the venue.
     * (See [supported types](https://developers.google.com/places/web-service/supported_types).)
     */
    get googlePlaceType() {
        return this.payload.google_place_type;
    }
    toJSON() {
        return {
            location: this.location.toJSON(),
            title: this.title,
            address: this.address,
            foursquare_id: this.foursquareId,
            foursquare_type: this.foursquareType,
            google_place_id: this.googlePlaceId,
            google_place_type: this.googlePlaceType
        };
    }
}
exports.Venue = Venue;
(0, inspectable_1.inspectable)(Venue, {
    serialize(struct) {
        const payload = {
            location: struct.location,
            title: struct.title,
            address: struct.address,
            foursquareId: struct.foursquareId,
            foursquareType: struct.foursquareType,
            googlePlaceId: struct.googlePlaceId,
            googlePlaceType: struct.googlePlaceType
        };
        return (0, helpers_1.filterPayload)(payload);
    }
});
