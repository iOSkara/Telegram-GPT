"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioAttachment = void 0;
const inspectable_1 = require("inspectable");
const structures_1 = require("../structures");
const file_attachment_1 = require("./file-attachment");
/**
 * This object represents an audio file to be treated as music by the Telegram
 * clients.
 */
class AudioAttachment extends file_attachment_1.FileAttachment {
    constructor() {
        super(...arguments);
        this.attachmentType = 'audio';
    }
    /** Duration of the audio in seconds as defined by sender */
    get duration() {
        return this.payload.duration;
    }
    /** Performer of the audio as defined by sender or by audio tags */
    get performer() {
        return this.payload.performer;
    }
    /** Title of the audio as defined by sender or by audio tags */
    get title() {
        return this.payload.title;
    }
    /** Original filename as defined by sender */
    get fileName() {
        return this.payload.file_name;
    }
    /** MIME type of the file as defined by sender */
    get mimeType() {
        return this.payload.mime_type;
    }
    /** File size */
    get fileSize() {
        return this.payload.file_size;
    }
    /** Thumbnail of the album cover to which the music file belongs */
    get thumbnail() {
        const { thumbnail } = this.payload;
        if (!thumbnail) {
            return;
        }
        return new structures_1.PhotoSize(thumbnail);
    }
    toJSON() {
        var _a;
        return {
            file_id: this.fileId,
            file_unique_id: this.fileUniqueId,
            duration: this.duration,
            performer: this.performer,
            title: this.title,
            file_name: this.fileName,
            mime_type: this.mimeType,
            file_size: this.fileSize,
            thumbnail: (_a = this.thumbnail) === null || _a === void 0 ? void 0 : _a.toJSON()
        };
    }
}
exports.AudioAttachment = AudioAttachment;
(0, inspectable_1.inspectable)(AudioAttachment, {
    serialize(attachment) {
        return {
            fileId: attachment.fileId,
            fileUniqueId: attachment.fileUniqueId,
            duration: attachment.duration,
            performer: attachment.performer,
            title: attachment.title,
            fileName: attachment.fileName,
            mimeType: attachment.mimeType,
            fileSize: attachment.fileSize,
            thumbnail: attachment.thumbnail
        };
    }
});
