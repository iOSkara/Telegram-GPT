"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StickerAttachment = void 0;
const inspectable_1 = require("inspectable");
const structures_1 = require("../structures");
const file_attachment_1 = require("./file-attachment");
/** This object represents a sticker. */
class StickerAttachment extends file_attachment_1.FileAttachment {
    constructor() {
        super(...arguments);
        this.attachmentType = 'sticker';
    }
    /**
     * Type of the sticker, currently one of `regular`, `mask`, `custom_emoji`.
     *
     * The type of the sticker is independent from its format, which is determined by the fields `is_animated` and `is_video`.
     */
    get type() {
        return this.payload.type;
    }
    /** Sticker width */
    get width() {
        return this.payload.width;
    }
    /** Sticker height */
    get height() {
        return this.payload.height;
    }
    /** `true`, if the sticker is animated */
    isAnimated() {
        return this.payload.is_animated;
    }
    /** `true`, if the sticker is a video sticker */
    isVideo() {
        return this.payload.is_video;
    }
    /** Sticker thumbnail in the .WEBP or .JPG format */
    get thumbnail() {
        const { thumbnail } = this.payload;
        if (!thumbnail) {
            return;
        }
        return new structures_1.PhotoSize(thumbnail);
    }
    /** Emoji associated with the sticker */
    get emoji() {
        return this.payload.emoji;
    }
    /** Name of the sticker set to which the sticker belongs */
    get setName() {
        return this.payload.set_name;
    }
    /** Is this sticker a premium one? */
    isPremium() {
        return this.premiumAnimation !== undefined;
    }
    /** Premium animation for the sticker, if the sticker is premium */
    get premiumAnimation() {
        const { premium_animation } = this.payload;
        if (!premium_animation) {
            return;
        }
        return new structures_1.File(premium_animation);
    }
    /** For mask stickers, the position where the mask should be placed */
    get maskPosition() {
        const { mask_position } = this.payload;
        if (!mask_position) {
            return;
        }
        return new structures_1.MaskPosition(mask_position);
    }
    /** For custom emoji stickers, unique identifier of the custom emoji */
    get customEmojiId() {
        return this.payload.custom_emoji_id;
    }
    /** `true`, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places */
    get needs_repainting() {
        return this.payload.needs_repainting;
    }
    /** File size */
    get fileSize() {
        return this.payload.file_size;
    }
    toJSON() {
        var _a, _b;
        return {
            file_id: this.fileId,
            file_unique_id: this.fileUniqueId,
            type: this.type,
            width: this.width,
            height: this.height,
            is_animated: this.isAnimated(),
            is_video: this.isVideo(),
            thumbnail: (_a = this.thumbnail) === null || _a === void 0 ? void 0 : _a.toJSON(),
            emoji: this.emoji,
            set_name: this.setName,
            mask_position: (_b = this.maskPosition) === null || _b === void 0 ? void 0 : _b.toJSON(),
            custom_emoji_id: this.customEmojiId,
            file_size: this.fileSize
        };
    }
}
exports.StickerAttachment = StickerAttachment;
(0, inspectable_1.inspectable)(StickerAttachment, {
    serialize(attachment) {
        return {
            fileId: attachment.fileId,
            fileUniqueId: attachment.fileUniqueId,
            width: attachment.width,
            height: attachment.height,
            isAnimated: attachment.isAnimated(),
            isVideo: attachment.isVideo(),
            thumbnail: attachment.thumbnail,
            emoji: attachment.emoji,
            setName: attachment.setName,
            maskPosition: attachment.maskPosition,
            fileSize: attachment.fileSize
        };
    }
});
