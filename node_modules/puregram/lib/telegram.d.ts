import { User } from './common/structures';
import { ApiMethods } from './generated';
import { TelegramOptions } from './types/interfaces';
import { ApiMethod, SoftString } from './types/types';
import { Updates } from './updates';
interface APICallMethod {
    /** Use this method to invoke Telegram Bot API `method` [with prompted `params`] */
    call: (method: SoftString<ApiMethod>, params?: Record<string, any>) => Promise<any>;
}
type ProxyAPIMethods = ApiMethods & APICallMethod;
/**
 * Telegram class. Actually, this class is a set of other classes such as `Updates` and (uh that's it. `api` is not a class, it's a `Proxy` object :P)
 */
export declare class Telegram {
    options: TelegramOptions;
    /**
     * API Proxy object
     *
     * @example
     * ```js
     * telegram.api.getMe()
     * telegram.api.sendMessage({ chat_id, text })
     * telegram.api.call('sendPhoto', { chat_id, photo })
     * ```
     */
    readonly api: ProxyAPIMethods;
    /** Updates instance */
    updates: Updates;
    /** Bot data. You are able to access it only after `updates.startPolling()` succeeded! */
    bot: User;
    constructor(options?: Partial<TelegramOptions>);
    /** Creates `Telegram` instance just from `token` [and `params`] */
    static fromToken(token: string, options?: Partial<TelegramOptions>): Telegram;
    /** @deprecated */
    setOptions(options: Partial<TelegramOptions>): this;
    /** Resolves `MediaInput` into a `File` or `string` */
    private createMediaInput;
    /** Uploads media as usual, returning `RequestInit` */
    private uploadMedia;
    /** Validates media and creates it under `attach://<attach-id>` ID if necessary */
    private createAttachMediaInput;
    /**
     * `uploadWithMedia` shares the same logic under the hood for both `sendMediaGroup` and `editMessageMedia`.
     * This method keeps it separate yet organic at the same time
     */
    private processUploadWithMedia;
    /**
     * Methods like `sendMediaGroup` and `editMessageMedia` has `media: MediaInput` (or `media: MediaInput[]`) properties.
     * This method makes it so this `media` property is handled properly
     */
    private uploadWithMedia;
    /** Invokes Telegram Bot API `path` method [with `params`] */
    private _callAPI;
    /**
     * Call API `method` with `params`
     * @deprecated use `telegram.api.call(...)` instead
     */
    callApi(method: string, params?: Record<string, any>): Promise<any>;
}
export {};
